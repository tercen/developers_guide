[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tercen Developer’s Guide",
    "section": "",
    "text": "0.1 What is Tercen?\nWelcome to the Tercen Developer’s Guide! This comprehensive resource will help you design, develop, and share modules for the Tercen platform.\nTercen is a collaborative data analysis platform that bridges the gap between data scientists and domain experts. It enables seamless collaboration by allowing:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tercen developer's guide</span>"
    ]
  },
  {
    "objectID": "index.html#what-is-tercen",
    "href": "index.html#what-is-tercen",
    "title": "Tercen Developer’s Guide",
    "section": "",
    "text": "Domain experts (e.g., biologists, researchers) to explore and analyze their data using intuitive visual interfaces\nDevelopers (e.g., bioinformaticians, data scientists) to create and share reusable analytical tools and web applications",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tercen developer's guide</span>"
    ]
  },
  {
    "objectID": "index.html#our-mission",
    "href": "index.html#our-mission",
    "title": "Tercen Developer’s Guide",
    "section": "0.2 Our Mission",
    "text": "0.2 Our Mission\nTercen promotes collaboration for data analysis because not everyone can code—nor should they need to. Everyone should benefit from the explosion of data and computational tools currently available.\nBy connecting non-programmers with programmers, Tercen creates a powerful ecosystem where:\n\nBiologists gain direct access to sophisticated analytical tools without needing programming expertise\nBioinformaticians can focus on algorithm development rather than operational details and repetitive analysis requests\n\nThis symbiotic relationship empowers both communities and democratizes data analysis.\n\nTercen empowers the biologist and liberates the bioinformatician.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tercen developer's guide</span>"
    ]
  },
  {
    "objectID": "index.html#what-youll-learn",
    "href": "index.html#what-youll-learn",
    "title": "Tercen Developer’s Guide",
    "section": "0.3 What You’ll Learn",
    "text": "0.3 What You’ll Learn\nThis guide covers everything you need to know about developing for Tercen:\n\nCore concepts and platform architecture\nStep-by-step development workflows with practical examples\n\nBest practices for creating robust, user-friendly modules\nDeployment strategies and continuous integration\nAdvanced topics including GPU development and custom visualizations\nTroubleshooting common issues and debugging techniques\n\nWhether you’re a seasoned developer or new to the Tercen ecosystem, this guide will help you create impactful analytical tools that serve the scientific community.\nLet’s get started building the future of collaborative data analysis!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tercen developer's guide</span>"
    ]
  },
  {
    "objectID": "01-getting-started/0-intro_guidelines.html",
    "href": "01-getting-started/0-intro_guidelines.html",
    "title": "2  Guidelines",
    "section": "",
    "text": "Introduction\nWe want developers to have a great experience building on the Tercen Platform. Building a vibrant developer ecosystem benefits everyone and helps make data analysis accessible to a wider community.\nThese guidelines show you how to use Tercen’s products, services, and APIs effectively, sharing best practices for building new products and services.\nWhile we need some rules of engagement, we’ve kept these guidelines as simple as possible. These guidelines work alongside our Terms of Service and Privacy Policy. Please read and understand these documents. We reserve the right to withdraw access if our products or services are misused.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Guidelines</span>"
    ]
  },
  {
    "objectID": "01-getting-started/0-intro_guidelines.html#legal-text",
    "href": "01-getting-started/0-intro_guidelines.html#legal-text",
    "title": "2  Guidelines",
    "section": "Legal text",
    "text": "Legal text\nBefore starting work, we’ll ask you to confirm that you’re happy to comply with the spirit and the letter of these guidelines.\nPlease use Tercen’s products and services responsibly. Our products, services and our brand are really important to us, and we ask that you do not do anything that might damage them.\nWe expect data produced with Tercen’s products to be represented transparently and honestly. Don’t misrepresent data or metrics created by our products. We expect you to use our products and services to help serve your customers. Don’t re-sell, re-purpose or license, any data obtained from Tercen. Don’t use our products to create a service that competes with Tercen or infringes our copyright. Keeping our customers’ data secure is the most important thing that Tercen does. Don’t use spiders, robots crawlers, data mining or similar tools to scrape the Tercen Website or APIs.\nTercen needs access to monitor your access to our API so don’t block us from doing so. Respect our rate-limits. Don’t overuse our APIs or resources – we expect you to comply with any fair usage guidelines we publish from time to time. If you have an idea as to how our products can be improved or you would like to try something experimental then please let us know and we’d be happy to discuss with you.\nYou can use our logo and branding where you have the right to do so, but please don’t do anything that could damage our brand integrity or be misleading or confusing to customers - that includes using our logo in any part of your logo, using the Tercen name in your app name or anything else that could be considered an abuse of our branding, logos or copyrighted materials.\nTreat your customers and their data responsibly. Keeping our customers’ data secure is the most important thing that Tercen does. We go to considerable lengths to ensure that all data sent to Tercen is handled securely.\nWe expect others with access to our customers’ data to treat it with the same level of trust and responsibility.\nOur terms for developers include:\n\nYou must have appropriate measures in place to protect any information you receive from Tercen against unauthorized access, use, or disclosure.\nYou must only use the data you need to build your product or service.\nYou must have an end user agreement and a privacy policy in place with respect to each of your customers - and it must be compatible with Tercen’s terms.\nYou must ensure you’re meeting all your legal obligations in terms of applicable data protection and consumer protection; don’t use Tercen’s products in connection with data you don’t have permission to process.\nYou must be able to meet the requirements of the European Union’s General Data Protection Regulation (GDPR) for any data you process which falls within the scope of the legislation and fulfill subject access requests as required. In addition to breach notifications required under GDPR, you’ll notify Tercen of any personal data breaches within 72 hours of becoming aware of a breach.\nYou must grant Tercen permission to audit your data processing activities. This can include independently produced audit reports.\n\nAs our developer platform and business evolves, so too will these guidelines. We’d love for you to get in touch if you’ve any feedback or suggestions for how we can make them better.\nWe know that occasionally things can go wrong and mistakes can be made. If at any time you are concerned that these guidelines may have been breached, please do notify us as soon as you become aware. These guidelines may change over time, so do come back and check periodically.\nThanks for reading this far - we’re excited to see what you’ll build!",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Guidelines</span>"
    ]
  },
  {
    "objectID": "01-getting-started/1-core-concepts.html",
    "href": "01-getting-started/1-core-concepts.html",
    "title": "3  Core concepts",
    "section": "",
    "text": "3.1 Tercen modules\nThis chapter introduces the fundamental concepts and building blocks of the Tercen platform. Understanding these concepts is essential before diving into development.\nTercen provides a modular platform where researchers can build and share computational components. There are three main types of modules in Tercen, each serving different purposes and complexity levels:",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Core concepts</span>"
    ]
  },
  {
    "objectID": "01-getting-started/1-core-concepts.html#tercen-modules",
    "href": "01-getting-started/1-core-concepts.html#tercen-modules",
    "title": "3  Core concepts",
    "section": "",
    "text": "3.1.1 Operators\nOperators are the foundational building blocks of Tercen. They represent single computational steps that can be chained together to create more complex analyses.\n\nPurpose: Execute specific computational functions (e.g., scale, log transform, statistical tests)\nImplementation: Written in R or Python (or any other language) as small units of code\nUse case: When you need a specific calculation or transformation\nProgramming required: Yes (R or Python)\n\n\n\n\n\n\n\nExample Operators\n\n\n\n\nStatistical functions: t-test, ANOVA, correlation\nData transformations: log, scale, normalize\n\nMathematical operations: addition, multiplication, division\nCustom algorithms: clustering, dimensionality reduction\n\n\n\n\n\n3.1.2 Workflow Templates\nWorkflow Templates (or simply Templates) represent complete, end-to-end analytical workflows that combine multiple steps into a cohesive analysis pipeline.\n\nPurpose: Provide ready-to-use workflows for common analysis types\nImplementation: Visual workflow builder with pre-configured steps\nUse case: When you need a complete analysis pipeline (e.g., RNA-seq, flow cytometry)\nProgramming required: No (but understanding of the analysis is helpful)\nScope: Highest level - encompasses entire analysis workflows\n\n\n\n\n\n\n\nExample Templates\n\n\n\n\nRNA-seq differential expression analysis\nFlow cytometry data processing\nProteomics data analysis\nTime-series analysis pipelines\n\n\n\n\n\n3.1.3 Web Apps\nWeb Apps provide interactive, user-friendly interfaces for specific analytical tasks or visualizations.\n\nPurpose: Create interactive tools for data exploration and analysis\nImplementation: Web-based interfaces that typically interact with an existing template\nUse case: When you need interactive visualizations or guided analysis tools\nProgramming required: Yes (web technologies)\nUser experience: Interactive dashboards and guided workflows\n\n\n\n\n\n\n\nExample Web Apps\n\n\n\n\nInteractive data exploration dashboards\nParameter optimization interfaces\nCustom visualization tools\nQuality control assessment apps",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Core concepts</span>"
    ]
  },
  {
    "objectID": "01-getting-started/1-core-concepts.html#module-hierarchy-and-relationships",
    "href": "01-getting-started/1-core-concepts.html#module-hierarchy-and-relationships",
    "title": "3  Core concepts",
    "section": "3.2 Module hierarchy and relationships",
    "text": "3.2 Module hierarchy and relationships\nThe three module types form a natural hierarchy based on complexity and scope:\n\n\n\n\n\ngraph TD\n    subgraph TP[Tercen Project]\n        A[Web Apps] --&gt; B[Workflow Templates]\n        B --&gt; C[Operators]\n    end\n    \n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style TP fill:#f5f5f5,stroke:#333,stroke-width:2px\n\n\n\n\n\n\n\nWeb Apps (highest level) provide interactive interfaces that orchestrate workflows and present results. They are optional as one can use the Tercen native interface to interact with templates and operators.\nWorkflow Templates (medium level) define complete analysis pipelines\nOperators (foundational level) perform individual computational tasks",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Core concepts</span>"
    ]
  },
  {
    "objectID": "01-getting-started/1-core-concepts.html#choosing-the-right-module-type",
    "href": "01-getting-started/1-core-concepts.html#choosing-the-right-module-type",
    "title": "3  Core concepts",
    "section": "3.3 Choosing the right module type",
    "text": "3.3 Choosing the right module type\nWhen deciding which type of module to build, consider:\n\n\n\n\n\n\n\n\nChoose Operators when you want to:\nChoose Web Apps when you want to:\nChoose Templates when you want to:\n\n\n\n\n✅ Create reusable computational functions\n✅ Build interactive analysis tools\n✅ Package complete analysis workflows\n\n\n✅ Implement specific algorithms\n✅ Provide guided user experiences\n✅ Standardize common analysis pipelines\n\n\n✅ Extend Tercen’s analytical capabilities\n✅ Create custom visualizations\n✅ Share best-practice workflows\n\n\n✅ Build foundational components\n✅ Develop parameter exploration tools\n✅ Enable one-click analysis solutions",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Core concepts</span>"
    ]
  },
  {
    "objectID": "01-getting-started/1-core-concepts.html#the-tercen-library",
    "href": "01-getting-started/1-core-concepts.html#the-tercen-library",
    "title": "3  Core concepts",
    "section": "3.4 The Tercen Library",
    "text": "3.4 The Tercen Library\nOnce developed and tested, modules can be shared through the Tercen Library.\nA Tercen Library is a collection of operators, templates, web apps and datasets shared across a team or an organisation.\nWhen you add a dataset, a step to a workflow, or an operator within a step, the Library window appears:\n\n\n\nYou can see the modules you can access from the Tercen public library or your organisational or personal library.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Core concepts</span>"
    ]
  },
  {
    "objectID": "01-getting-started/1-core-concepts.html#development-workflow-overview",
    "href": "01-getting-started/1-core-concepts.html#development-workflow-overview",
    "title": "3  Core concepts",
    "section": "3.5 Development workflow overview",
    "text": "3.5 Development workflow overview\nThe typical development process follows these stages:\n\nDesign: Define your module’s purpose and requirements\nDevelop: Implement your module using appropriate tools\nTest: Validate functionality with sample data\nDocument: Create clear usage instructions\nDeploy: Publish to the Tercen Library\nMaintain: Update and improve based on user feedback",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Core concepts</span>"
    ]
  },
  {
    "objectID": "01-getting-started/1-core-concepts.html#whats-next",
    "href": "01-getting-started/1-core-concepts.html#whats-next",
    "title": "3  Core concepts",
    "section": "3.6 What’s next?",
    "text": "3.6 What’s next?\nNow that you understand the core concepts, you’re ready to:\n\nSet up your development environment (next chapter)\nChoose which type of module to build\nStart developing with the appropriate tools and frameworks\n\nEach module type has dedicated sections in this guide with detailed instructions, examples, and best practices.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Core concepts</span>"
    ]
  },
  {
    "objectID": "01-getting-started/2-environment-setup.html",
    "href": "01-getting-started/2-environment-setup.html",
    "title": "4  Environment Setup",
    "section": "",
    "text": "4.1 Prerequisites\nSetting up your development environment correctly is crucial for a smooth Tercen development experience. This chapter covers all the tools, accounts, and configurations you’ll need to start building operators, workflow templates, and applications for the Tercen platform.\nBefore diving into Tercen development, ensure you have the following essential tools and accounts set up:",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "01-getting-started/2-environment-setup.html#prerequisites",
    "href": "01-getting-started/2-environment-setup.html#prerequisites",
    "title": "4  Environment Setup",
    "section": "",
    "text": "4.1.1 Required Tools\nGit Version Control - Install Git for your operating system - Git is essential for version control and collaboration - Verify installation: git --version\nDocker\nDocker is required for local testing and deployment of operators. Installation varies by platform:\nWindows: - Install Docker Desktop for Windows - Important: Select the WSL 2 backend option during installation for optimal performance - Requires Windows 10/11 with WSL 2 enabled\nmacOS: - Install Docker Desktop for Mac - Available for both Intel and Apple Silicon (M1/M2) Macs - Download the appropriate version for your chip architecture\nLinux: - Install Docker Engine: Follow the official Docker installation guide for Linux - Or install Docker Desktop for Linux: Docker Desktop for Linux - Popular distributions have specific installation steps (Ubuntu, CentOS, Debian, etc.)\nVerification (all platforms):\ndocker --version\ndocker run hello-world\nEnsure the Docker daemon is running before starting development.\nGitHub Account - Create a GitHub account if you don’t have one - Required for repository hosting and collaboration - If using alternative version control systems, please contact the Tercen team\n\n\n\n\n\n\nDocker Configuration\n\n\n\nMake sure Docker Desktop is running before starting development. On Windows, select the WSL 2 backend option during installation for optimal performance.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "01-getting-started/2-environment-setup.html#development-environment",
    "href": "01-getting-started/2-environment-setup.html#development-environment",
    "title": "4  Environment Setup",
    "section": "4.2 Development Environment",
    "text": "4.2 Development Environment\n\n4.2.1 Visual Studio Code (Recommended)\nWe strongly recommend using Visual Studio Code as your primary development environment because:\n\nContainer Support: Built-in dev container functionality\nTemplate Integration: Seamless integration with our GitHub repository templates\nMulti-language Support: Excellent support for R, Python, and other languages\n\nInstallation Steps: 1. Download and install VS Code 2. Install the following extensions: - Dev Containers (for containerized development) - R Extension (for R development) - Python Extension (for Python development) - Docker Extension (for Docker management)\n\n\n4.2.2 GitHub Repository Templates\nTercen provides pre-configured repository templates that include:\n\nDevelopment containers with all Tercen dependencies\nTemplate code for operators in R and Python\nCI/CD pipelines for automated testing and deployment\nDocumentation templates for consistent documentation",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "01-getting-started/2-environment-setup.html#tercen-instance-setup",
    "href": "01-getting-started/2-environment-setup.html#tercen-instance-setup",
    "title": "4  Environment Setup",
    "section": "4.3 Tercen Instance Setup",
    "text": "4.3 Tercen Instance Setup\nYou have two options for accessing Tercen during development:\n\n4.3.1 Option 1: Cloud Instance (Recommended for Beginners)\n\nUse your existing Tercen cloud account at tercen.com or your own organisation’s instance\nNo additional setup required\nIdeal for learning and initial development\nAccess to shared libraries and community operators\n\n\n\n4.3.2 Option 2: Local Tercen Studio (Advanced)\nFor advanced development and testing, you can set up a local Tercen instance:\nInstallation Steps:\n\nClone Tercen Studio repository:\n\ngit clone https://github.com/tercen/tercen_studio.git\ncd tercen_studio\n\nCreate Docker network:\n\ndocker network create tercen\n\nStart Tercen Studio:\n\ndocker-compose up -d\n\nAccess local instance:\n\nURL: http://127.0.0.1:5402\nUsername: admin\nPassword: admin\n\n\n\n\n\n\n\n\nLocal vs Cloud Development\n\n\n\n\nCloud: Easier setup, shared resources, collaboration features\nLocal: Full control, offline development, testing isolation\n\nMost developers start with cloud development and move to local setup for advanced use cases.\n\n\n\n\n4.3.3 Troubleshooting Common Issues\nDocker not starting: - Ensure Docker Desktop is running - Check system requirements for Docker - On Windows, verify WSL 2 is enabled\nGit authentication issues: - Set up SSH keys for GitHub: GitHub SSH documentation - Or use GitHub CLI: gh auth login\nVS Code extensions not working: - Restart VS Code after installing extensions - Check extension compatibility with your VS Code version - Ensure you have the latest version of VS Code",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "01-getting-started/2-environment-setup.html#next-steps",
    "href": "01-getting-started/2-environment-setup.html#next-steps",
    "title": "4  Environment Setup",
    "section": "4.4 Next Steps",
    "text": "4.4 Next Steps\nYour development environment is now ready for building powerful analytical tools on the Tercen platform!\nYou can now start developing a module. The next chapters cover module development. Each module type has dedicated sections in this guide with detailed instructions.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Environment Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/1-design-principles.html",
    "href": "02-operator-development/1-design-principles.html",
    "title": "5  Operator Design Principles",
    "section": "",
    "text": "5.1 Understanding Tercen’s Data Model\nThe foundation of every successful operator lies in careful design. This chapter covers the fundamental design principles and planning considerations that ensure your operator integrates seamlessly with Tercen’s data projection system and provides computational value to users.\nTercen operates on a fundamental principle:\nThis design ensures that operators can be chained together in complex analytical workflows while maintaining data lineage and relationships.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operator Design Principles</span>"
    ]
  },
  {
    "objectID": "02-operator-development/1-design-principles.html#understanding-tercens-data-model",
    "href": "02-operator-development/1-design-principles.html#understanding-tercens-data-model",
    "title": "5  Operator Design Principles",
    "section": "",
    "text": "Core Principle\n\n\n\nEvery operator receives data from a Tercen workflow through the crosstab projection as input, and returns tables (with relations to input data) as output.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operator Design Principles</span>"
    ]
  },
  {
    "objectID": "02-operator-development/1-design-principles.html#development-workflow-overview",
    "href": "02-operator-development/1-design-principles.html#development-workflow-overview",
    "title": "5  Operator Design Principles",
    "section": "5.2 Development Workflow Overview",
    "text": "5.2 Development Workflow Overview\nCreating a Tercen operator follows a structured, iterative workflow designed to ensure reliability, maintainability, and user-friendliness. The development process consists of eight key phases, with continuous iteration between implementation, testing, and maintenance:\n\n\n\n\n\nclassDiagram\n        class Design {\n            Define input-output\n            Choose projection\n            Plan computations\n        }\n        class RepositorySetup {\n            Initialise GitHub repo\n        }\n        class DevelopmentEnvironment {\n            Load repo\n            Prepare Tercen step\n        }\n        class Implementation {\n            Connect to Tercen data\n            Write computational functions\n        }\n        class Testing {\n            Create unit tests\n            Validate with sample data\n        }\n        class Documentation {\n            Write usage instructions\n            Populate operator metadata and specs\n        }\n        class Deployment {\n            Control dependencies\n            Release to library\n        }\n        class Maintenance {\n            Get feedback\n            Fix bugs\n            Add features\n        }\n\n        Design --&gt; RepositorySetup\n        RepositorySetup --&gt; DevelopmentEnvironment\n        DevelopmentEnvironment --&gt; Implementation\n        Implementation --&gt; Testing\n        Testing --&gt; Documentation\n        Documentation --&gt; Deployment\n        Deployment --&gt; Maintenance\n        Maintenance --&gt; Implementation",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operator Design Principles</span>"
    ]
  },
  {
    "objectID": "02-operator-development/1-design-principles.html#input-projection-design",
    "href": "02-operator-development/1-design-principles.html#input-projection-design",
    "title": "5  Operator Design Principles",
    "section": "5.3 Input Projection Design",
    "text": "5.3 Input Projection Design\nThe input projection defines what data your operator will receive. This projection is configured in Tercen’s data step and determines the structure of your input table.\nCommon projection patterns:\n\n\n\n\n\n\n\n\n\nProjection Type\nComponents\nUse Case\nExample\n\n\n\n\nCell-wise Operations\ny-axis, row, col\nCompute a value per cell\nMean, median, custom statistics, normalization\n\n\nRow-wise Operations\ny-axis, row\nCompute a value per observation\nClustering, dimension reduction, outlier detection\n\n\nColumn-wise Operations\ny-axis, col\nCompute a value per variable\nFeature importance, column statistics, data loading\n\n\nGlobal Operations\ny-axis\nCompute across all data\nGlobal statistics, model fitting, data export",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operator Design Principles</span>"
    ]
  },
  {
    "objectID": "02-operator-development/1-design-principles.html#output-relation-strategy",
    "href": "02-operator-development/1-design-principles.html#output-relation-strategy",
    "title": "5  Operator Design Principles",
    "section": "5.4 Output Relation Strategy",
    "text": "5.4 Output Relation Strategy\nThe output relation defines how your computed results relate back to the input data:\n\nPer CellPer ColumnPer Row\n\n\nResults are computed for each unique combination of row and column factors.\nExample: Computing mean values per experimental condition.\nInput: Multiple measurements (projected onto the crosstab y axis) per condition (projected onto the rows and columns)\nOutput: One mean value per condition\n\n\nResults are computed across all rows for each column.\nExample: Clustering samples based on feature profiles.\nInput: Feature matrix (genes × samples)\nOutput: Cluster assignments per sample\n\n\nResults are computed across all columns for each row.\nExample: Gene-wise statistics across samples.\nInput: Expression matrix (genes × samples)  \nOutput: Statistics per gene",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operator Design Principles</span>"
    ]
  },
  {
    "objectID": "02-operator-development/1-design-principles.html#design-checklist",
    "href": "02-operator-development/1-design-principles.html#design-checklist",
    "title": "5  Operator Design Principles",
    "section": "5.5 Design Checklist",
    "text": "5.5 Design Checklist\nBefore writing any code, ensure you can clearly answer these fundamental questions:\n\nProblem Definition: What specific computational problem does this operator solve?\nInput Requirements: Which projection components are required (x, y, row, col, etc.)?\nOutput Strategy: What is the output relation (per cell, per column, per row) to the input data?\nData Types: What are the expected input data types and valid ranges?\nParameters: What parameters should be configurable by users?\nError Handling: How will the operator handle invalid inputs or edge cases?\nPerformance: Are there any computational constraints or optimization requirements?\n\n\n\n\n\n\n\nDesign Best Practices\n\n\n\n\nStart simple and add complexity gradually\nConsider how your operator will compose with others in workflows\nDesign for reusability across different data types and use cases\nDocument your design decisions for future reference",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operator Design Principles</span>"
    ]
  },
  {
    "objectID": "02-operator-development/1-design-principles.html#next-steps",
    "href": "02-operator-development/1-design-principles.html#next-steps",
    "title": "5  Operator Design Principles",
    "section": "5.6 Next Steps",
    "text": "5.6 Next Steps\nOnce you have a clear design for your operator, the next step is setting up your development repository. Continue to the next chapter to learn about repository setup and project structure.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operator Design Principles</span>"
    ]
  },
  {
    "objectID": "02-operator-development/2-repository-setup.html",
    "href": "02-operator-development/2-repository-setup.html",
    "title": "6  Repository Setup",
    "section": "",
    "text": "6.1 Prerequisites\nAll Tercen operators are developed and distributed through GitHub repositories. This ensures version control, collaborative development, and seamless integration with Tercen’s operator library. This chapter will guide you through setting up your operator repository with the proper structure and configuration.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/2-repository-setup.html#prerequisites",
    "href": "02-operator-development/2-repository-setup.html#prerequisites",
    "title": "6  Repository Setup",
    "section": "",
    "text": "GitHub account with repository creation permissions\nBasic familiarity with Git version control\nUnderstanding of R or Python programming fundamentals\nFamiliarity with R or Python package management concepts (renv, pip, …)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/2-repository-setup.html#choosing-a-template",
    "href": "02-operator-development/2-repository-setup.html#choosing-a-template",
    "title": "6  Repository Setup",
    "section": "6.2 Choosing a Template",
    "text": "6.2 Choosing a Template\nTercen provides several repository templates optimized for different operator types:\n\n\n\nTemplate\nBest For\nFeatures\n\n\n\n\nR Operator\nMost R operators\nFull feature set, examples\n\n\nPython Operator\nAll Python operators\nModern Python, poetry support",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/2-repository-setup.html#repository-creation-process",
    "href": "02-operator-development/2-repository-setup.html#repository-creation-process",
    "title": "6  Repository Setup",
    "section": "6.3 Repository Creation Process",
    "text": "6.3 Repository Creation Process\nFollow these steps to set up your operator repository:\n\nChoose your operator name\n\nUse descriptive names that clearly indicate the operator’s function\nFollow the naming convention: {descriptive_name}_operator\n\nSelect appropriate template\n\nNavigate to the template repository on GitHub\nClick “Use this template” → “Create a new repository”\n\nConfigure repository settings\n\nSet visibility (public for community operators, private for proprietary ones)\nAdd a descriptive README during creation\nInitialize with the template’s structure\n\nClone locally\n\nClone into your development environment\nEnsure you have Git configured with your credentials\n\n\n\n\n\n\n\n\nNaming Convention\n\n\n\nImportant: The repository name must end with _operator\nExamples: - ✅ linear_regression_operator - ✅ differential_expression_operator - ✅ data_quality_check_operator - ❌ my_operator - ❌ test123 - ❌ linear_regression (missing _operator suffix)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/2-repository-setup.html#repository-structure-overview",
    "href": "02-operator-development/2-repository-setup.html#repository-structure-overview",
    "title": "6  Repository Setup",
    "section": "6.4 Repository Structure Overview",
    "text": "6.4 Repository Structure Overview\nThe templates provide a complete project structure including:\nyour_operator_repository/\n├── .devcontainer/          # Development container configuration\n├── .github/\n│   └── workflows/          # CI/CD automation\n├── main.R                  # Main operator implementation (R)\n├── main.py                 # Main operator implementation (Python)\n├── operator.json           # Operator metadata and parameters\n├── README.md               # Documentation\n├── requirements.txt        # Python dependencies\n├── renv.lock              # R dependencies snapshot\n└── test/                  # Test files and data\n    ├── input.csv\n    ├── output.csv\n    ├── test.json\n    └── README.md\n\n\n\n\n\n\nRepository Structure Benefits\n\n\n\nThe templates provide: - Development container configuration for consistent environments - Continuous integration setup for automated testing - Documentation templates following best practices - Example implementations as starting points - Testing frameworks for validation",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/2-repository-setup.html#next-steps",
    "href": "02-operator-development/2-repository-setup.html#next-steps",
    "title": "6  Repository Setup",
    "section": "6.5 Next Steps",
    "text": "6.5 Next Steps\nWith your repository set up, you’re ready to configure your development environment. The next chapter will guide you through setting up your IDE and connecting to a Tercen instance for testing.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/3-development-environment.html",
    "href": "02-operator-development/3-development-environment.html",
    "title": "7  Development Environment Setup",
    "section": "",
    "text": "7.1 IDE Project Setup\nThis chapter covers setting up your development environment for building Tercen operators. We’ll configure your IDE, set up development containers, and prepare a Tercen instance for testing your operators.\nAs mentioned in the getting started section, we recommend using VS Code for operator development. While this workflow is optimized for VS Code, it can be adapted to other IDEs such as JetBrains products. Please reach out if you need support for an alternative development environment.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Development Environment Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/3-development-environment.html#ide-project-setup",
    "href": "02-operator-development/3-development-environment.html#ide-project-setup",
    "title": "7  Development Environment Setup",
    "section": "",
    "text": "7.1.1 Development Container Setup\nThe repository templates include pre-configured development containers that provide consistent, reproducible development environments:\n\nClone the repository: Clone your newly created operator repository from GitHub into a VS Code workspace\nOpen in dev container: The template includes a pre-configured development container that provides:\n\nMinimal Tercen runtime requirements\nContainerized environment for consistent dependency management\nDocker-based isolation ensuring reproducible builds\n\nVerify container functionality:\n\nThe first time you open the project, the container will need to be built (this may take several minutes)\nSubsequent opens will be much faster as the container is cached\nTest the setup by running the appropriate command for your language:\n\nR: library(tercen)\nPython: import tercen\n\n\n\n\n\n\n\n\n\nContainer Benefits\n\n\n\nUsing development containers ensures that your operator runs in the same environment during development and deployment, eliminating “works on my machine” issues.\n\n\n\n\n7.1.2 IDE Configuration\nFor optimal development experience, Install recommended extensions (VS Code will prompt you): - Language-specific extensions (R or Python) - Dev Container extension for container management - Git extensions for version control",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Development Environment Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/3-development-environment.html#tercen-instance-setup",
    "href": "02-operator-development/3-development-environment.html#tercen-instance-setup",
    "title": "7  Development Environment Setup",
    "section": "7.2 Tercen Instance Setup",
    "text": "7.2 Tercen Instance Setup\nCreate a development project in Tercen to test your operator. You have two deployment options:\n\nCloud InstanceLocal Instance\n\n\nFor quick setup and collaboration:\n\nAccess Tercen Cloud: Navigate to tercen.com or your organization’s instance\nCreate new project:\n\nNavigate to your team workspace\nClick “New project”\nChoose a descriptive name for your development project\n\nImport sample data: Use “From git” with https://github.com/tercen/developers_guide_project\nOpen dev workflow: Navigate to “Dev workflow” → “Dev data step”\n\n\n\nFor complete control and offline development:\n\nStart local instance: Ensure your local Tercen instance is running at http://127.0.0.1:5402/\nCreate new project: Click “New project” in the web interface\nImport sample data: Use “From git” with https://github.com/tercen/developers_guide_project\nOpen dev workflow: Navigate to “Dev workflow” → “Dev data step”\n\n\n\n\nThe sample project provides a pre-configured crosstab view with real data for testing your operator development.\n\n\n\n\n\n\nDevelopment Project Content\n\n\n\n\nPre-configured data projections for testing\nSample dataset",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Development Environment Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/3-development-environment.html#environment-validation",
    "href": "02-operator-development/3-development-environment.html#environment-validation",
    "title": "7  Development Environment Setup",
    "section": "7.3 Environment Validation",
    "text": "7.3 Environment Validation\nBefore proceeding with implementation, validate your complete setup:\n\n7.3.1 Development Environment Checklist\n\nRepository cloned and opened in IDE\nDevelopment container built and running\nLanguage-specific dependencies available (tercen library accessible)\nGit configuration working for commits and pushes\n\n\n\n7.3.2 Tercen Instance Checklist\n\nTercen instance accessible via web browser\nSample project imported successfully\nDev workflow and data step accessible\nData projection displaying correctly in crosstab view\n\n\n\n7.3.3 Connection Test\nPerform a basic connection test to ensure everything works:\n\nR TestPython Test\n\n\n# Test basic connection (replace with your actual IDs)\nlibrary(tercen)\n\nctx &lt;- tercenCtx(\n    workflowId = \"YOUR_WORKFLOW_ID\",\n    stepId = \"YOUR_STEP_ID\",\n    username = \"admin\",        # for local instance\n    password = \"admin\",        # for local instance  \n    serviceUri = \"http://tercen:5400/\"  # for local instance\n)\n\n# Verify data access\ndata &lt;- ctx %&gt;% select(.y)\nprint(head(data))\n\n\n# Test basic connection (replace with your actual IDs)\nfrom tercen.client import context as ctx\n\ntercenCtx = ctx.TercenContext(\n    workflowId=\"YOUR_WORKFLOW_ID\",\n    stepId=\"YOUR_STEP_ID\",\n    username=\"admin\",\n    password=\"admin\",\n    serviceUri=\"http://tercen:5400/\"\n)\n\n# Verify data access\ndata = tercenCtx.select(['.y'])\nprint(data.head())",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Development Environment Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/3-development-environment.html#next-steps",
    "href": "02-operator-development/3-development-environment.html#next-steps",
    "title": "7  Development Environment Setup",
    "section": "7.4 Next Steps",
    "text": "7.4 Next Steps\nWith your development environment configured and validated, you’re ready to establish a connection to Tercen’s data API and begin implementing your operator. The next chapter will cover the fundamentals of connecting to Tercen data and understanding the context system.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Development Environment Setup</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html",
    "href": "02-operator-development/4-basic-implementation.html",
    "title": "8  Basic Implementation Patterns",
    "section": "",
    "text": "8.1 Understanding Tercen Context\nThis chapter introduces the fundamental implementation patterns for Tercen operators. You’ll learn how to connect to Tercen’s data API, understand the context system, and implement the core computational logic that forms the foundation of every operator.\nThe Tercen Context is your operator’s gateway to the platform. It provides access to:",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html#understanding-tercen-context",
    "href": "02-operator-development/4-basic-implementation.html#understanding-tercen-context",
    "title": "8  Basic Implementation Patterns",
    "section": "",
    "text": "Input data based on the current projection\nMetadata about the analysis workflow\n\nFunctions for data selection and result submission\nAccess to user-defined parameters\nError handling and logging capabilities\n\n\n8.1.1 Connection Identifiers\nEvery data step in Tercen has unique identifiers that your operator uses to connect:",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html#required-identifiers",
    "href": "02-operator-development/4-basic-implementation.html#required-identifiers",
    "title": "8  Basic Implementation Patterns",
    "section": "8.2 Required Identifiers",
    "text": "8.2 Required Identifiers\n\nWorkflow ID: Identifies the specific workflow containing your data\nStep ID: Identifies the specific data step within that workflow\n\nThese can be found in the data step URL: /w/{workflowId}/ds/{stepId}\nExample URL: https://tercen.com/w/12345abc/ds/67890def - Workflow ID: 12345abc - Step ID: 67890def",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html#data-exploration-and-selection",
    "href": "02-operator-development/4-basic-implementation.html#data-exploration-and-selection",
    "title": "8  Basic Implementation Patterns",
    "section": "8.3 Data Exploration and Selection",
    "text": "8.3 Data Exploration and Selection\nOnce connected, explore the available data structure:\n\nRPython\n\n\n# Basic data selection\nctx %&gt;% select(.y)                    # Get y-axis values\nctx %&gt;% select(.y, .ci, .ri)         # Get y values with indices\n\n# Explore projection components  \nctx %&gt;% cselect()                     # Column factors\nctx %&gt;% rselect()                     # Row factors\nctx %&gt;% colors()                      # Color factors\nctx %&gt;% labels()                      # Label factors\n\n# Get factor names\nctx$cnames                            # Column factor names\nctx$rnames                            # Row factor names\n\n# Convert to matrix format (if applicable)\nctx %&gt;% as.matrix()                   # Matrix representation\n\n\n# Basic data selection\ntercenCtx.select(['.y'])              # Get y-axis values\ntercenCtx.select(['.y', '.ci', '.ri']) # Get y values with indices\n\n# Explore projection components\ntercenCtx.cselect()                   # Column factors\ntercenCtx.rselect()                   # Row factors  \ntercenCtx.colors()                    # Color factors\ntercenCtx.labels()                    # Label factors\n\n# Get factor names\ntercenCtx.cnames                      # Column factor names\ntercenCtx.rnames                      # Row factor names\n\n# Use different dataframe libraries\ntercenCtx.select(['.y'], df_lib=\"pandas\")   # Pandas DataFrame\ntercenCtx.select(['.y'], df_lib=\"polars\")   # Polars DataFrame\n\n\n\n\n8.3.1 Key API Functions\n\n\n\n\n\n\n\n\nFunction\nPurpose\nReturns\n\n\n\n\nselect()\nGet specific data columns\nDataFrame with selected columns\n\n\ncselect()\nGet column factor data\nDataFrame with column factors\n\n\nrselect()\nGet row factor data\nDataFrame with row factors\n\n\nas.matrix()\nConvert to matrix format\nMatrix (y-values as matrix)\n\n\ncolors()\nGet color factor data\nDataFrame with color factors\n\n\nlabels()\nGet label factor data\nDataFrame with label factors\n\n\naddNamespace()\nAdd unique column names\nModified DataFrame\n\n\nsave()\nSend results back to Tercen\nSuccess confirmation",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html#standard-operator-workflow",
    "href": "02-operator-development/4-basic-implementation.html#standard-operator-workflow",
    "title": "8  Basic Implementation Patterns",
    "section": "8.4 Standard Operator Workflow",
    "text": "8.4 Standard Operator Workflow\nEvery operator follows this fundamental pattern:\n\nConnect to Tercen using context\nSelect required data components\nCompute your analytical results\nSave results with proper formatting\n\n\n\n\n\n\n\nDevelopment Tip\n\n\n\nStart by exploring your data interactively using the selection functions. Understanding the data structure is crucial before implementing your computational logic.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html#core-implementation-patterns",
    "href": "02-operator-development/4-basic-implementation.html#core-implementation-patterns",
    "title": "8  Basic Implementation Patterns",
    "section": "8.5 Core Implementation Patterns",
    "text": "8.5 Core Implementation Patterns\n\n8.5.1 Pattern 1: Cell-wise Operations\nThe most common pattern computes results for each unique combination of row and column factors:\n\nR ImplementationPython Implementation\n\n\nlibrary(tercen)\nlibrary(dplyr)\n\n# Connect to Tercen\nctx &lt;- tercenCtx(workflowId = \"YOUR_WORKFLOW_ID\", stepId = \"YOUR_STEP_ID\")\n\n# Cell-wise computation pattern\nresult &lt;- ctx %&gt;%\n  # Step 1: Select required data components\n  select(.y, .ci, .ri) %&gt;%           # y-values with cell indices\n  \n  # Step 2: Group by projection components (per-cell grouping)\n  group_by(.ri, .ci) %&gt;%             # Group by row and column indices\n  \n  # Step 3: Compute your analysis\n  summarise(\n    mean_value = mean(.y, na.rm = TRUE),\n    count = n(),\n    .groups = 'drop'\n  ) %&gt;%\n  \n  # Step 4: Handle edge cases\n  mutate(\n    mean_value = ifelse(count == 0, NA_real_, mean_value)\n  )\n\n# Step 5: Prepare output and save\nresult &lt;- ctx$addNamespace(result)\nctx$save(result)\n\n\nfrom tercen.client import context as ctx\nimport polars as pl\n\n# Connect to Tercen\ntercenCtx = ctx.TercenContext(workflowId=\"YOUR_WORKFLOW_ID\", stepId=\"YOUR_STEP_ID\")\n\n# Cell-wise computation pattern\ndf = (\n    tercenCtx\n    # Step 1: Select required data components\n    .select(['.y', '.ci', '.ri'], df_lib=\"polars\")\n    \n    # Step 2: Group by projection components (per-cell grouping)\n    .group_by(['.ci', '.ri'])\n    \n    # Step 3: Compute your analysis\n    .agg([\n        pl.col('.y').mean().alias('mean_value'),\n        pl.col('.y').count().alias('count')\n    ])\n    \n    # Step 4: Handle edge cases\n    .with_columns([\n        pl.when(pl.col('count') == 0)\n          .then(None)\n          .otherwise(pl.col('mean_value'))\n          .alias('mean_value')\n    ])\n)\n\n# Step 5: Prepare output and save\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)\n\n\n\n\n\n8.5.2 Pattern 2: Row-wise Operations\nCompute results across columns for each row:\n\nR ImplementationPython Implementation\n\n\n# Row-wise computation pattern\nresult &lt;- ctx %&gt;%\n  select(.y, .ri) %&gt;%                 # y-values with row indices\n  group_by(.ri) %&gt;%                   # Group by row indices only\n  summarise(\n    row_sum = sum(.y, na.rm = TRUE),\n    row_mean = mean(.y, na.rm = TRUE),\n    .groups = 'drop'\n  )\n\nresult &lt;- ctx$addNamespace(result)\nctx$save(result)\n\n\n# Row-wise computation pattern\ndf = (\n    tercenCtx\n    .select(['.y', '.ri'], df_lib=\"polars\")\n    .group_by(['.ri'])\n    .agg([\n        pl.col('.y').sum().alias('row_sum'),\n        pl.col('.y').mean().alias('row_mean')\n    ])\n)\n\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)\n\n\n\n\n\n8.5.3 Pattern 3: Column-wise Operations\nCompute results across rows for each column:\n\nR ImplementationPython Implementation\n\n\n# Column-wise computation pattern\nresult &lt;- ctx %&gt;%\n  select(.y, .ci) %&gt;%                 # y-values with column indices\n  group_by(.ci) %&gt;%                   # Group by column indices only\n  summarise(\n    col_var = var(.y, na.rm = TRUE),\n    col_max = max(.y, na.rm = TRUE),\n    .groups = 'drop'\n  )\n\nresult &lt;- ctx$addNamespace(result)\nctx$save(result)\n\n\n# Column-wise computation pattern\ndf = (\n    tercenCtx\n    .select(['.y', '.ci'], df_lib=\"polars\")\n    .group_by(['.ci'])\n    .agg([\n        pl.col('.y').var().alias('col_var'),\n        pl.col('.y').max().alias('col_max')\n    ])\n)\n\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html#handling-factor-data",
    "href": "02-operator-development/4-basic-implementation.html#handling-factor-data",
    "title": "8  Basic Implementation Patterns",
    "section": "8.6 Handling Factor Data",
    "text": "8.6 Handling Factor Data\nWhen working with categorical data from row/column factors:\n\nRPython\n\n\n# Working with factors\nfactor_data &lt;- ctx %&gt;% \n  select(.y, .ci, .ri) %&gt;%\n  left_join(ctx %&gt;% cselect(), by = \".ci\") %&gt;%  # Join column factors\n  left_join(ctx %&gt;% rselect(), by = \".ri\")      # Join row factors\n\n# Now you have access to the actual factor values, not just indices\n\n\n# Working with factors\ny_data = tercenCtx.select(['.y', '.ci', '.ri'], df_lib=\"polars\")\ncol_factors = tercenCtx.cselect(df_lib=\"polars\")\nrow_factors = tercenCtx.rselect(df_lib=\"polars\")\n\n# Join to get factor values\ndf = (\n    y_data\n    .join(col_factors, on=\".ci\", how=\"left\")\n    .join(row_factors, on=\".ri\", how=\"left\")\n)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/4-basic-implementation.html#next-steps",
    "href": "02-operator-development/4-basic-implementation.html#next-steps",
    "title": "8  Basic Implementation Patterns",
    "section": "8.7 Next Steps",
    "text": "8.7 Next Steps\nNow that you understand the basic implementation patterns, the next chapter will cover advanced features including error handling, parameter management, and comprehensive testing strategies. These techniques are essential for creating robust, production-ready operators.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Basic Implementation Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html",
    "href": "02-operator-development/5-advanced-features.html",
    "title": "9  Parameter Management and Configuration",
    "section": "",
    "text": "9.1 Understanding Operator Parameters\nBuilding on the basic implementation patterns, this chapter focuses on parameter management and configuration. You’ll learn how to create user-configurable operators through properties, settings, and parameter validation that make your operators flexible and user-friendly.\nParameters allow users to customize operator behavior without modifying code. They bridge the gap between the flexibility needed for different use cases and the standardization required for reliable operation.\nWell-designed parameters provide:\nParameters flow through your operator in this sequence:",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#understanding-operator-parameters",
    "href": "02-operator-development/5-advanced-features.html#understanding-operator-parameters",
    "title": "9  Parameter Management and Configuration",
    "section": "",
    "text": "Flexibility: Users can adapt operators to different datasets and requirements\nReusability: Single operators can handle multiple analytical scenarios\nUser Control: Domain experts can fine-tune analysis without programming\nStandardization: Consistent interface patterns across operators\n\n\n\nDefinition: Declared in operator.json with types and defaults\nUser Input: Configured through Tercen’s UI when adding operators\nValidation: Checked for type safety and constraint compliance\nAccess: Retrieved in operator code for computational use\nApplication: Used to modify operator behavior and outputs",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#parameter-configuration",
    "href": "02-operator-development/5-advanced-features.html#parameter-configuration",
    "title": "9  Parameter Management and Configuration",
    "section": "9.2 Parameter Configuration",
    "text": "9.2 Parameter Configuration\nParameters are defined in your operator.json file and accessed programmatically in your operator code.\n\n9.2.1 Basic Parameter Definition\nEach parameter requires several key properties:\n{\n  \"properties\": [\n    {\n      \"kind\": \"BooleanProperty\",\n      \"name\": \"parameter.name\",\n      \"defaultValue\": true,\n      \"description\": \"Clear description of what this parameter controls\"\n    }\n  ]\n}\n\n\n9.2.2 Parameter Types and Usage\nTercen supports several parameter types, each with specific use cases:\n\n\n\n\n\n\n\n\nParameter Type\nPurpose\nExample Use Cases\n\n\n\n\nBooleanProperty\nTrue/false options\nEnable/disable features, toggle algorithms\n\n\nDoubleProperty\nDecimal number inputs\nThresholds, cutoffs, scaling factors\n\n\nStringProperty\nText inputs\nMethod names, file paths, custom labels\n\n\nEnumeratedProperty\nDropdown selections\nAlgorithm choices, predefined options",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#parameter-examples",
    "href": "02-operator-development/5-advanced-features.html#parameter-examples",
    "title": "9  Parameter Management and Configuration",
    "section": "9.3 Parameter Examples",
    "text": "9.3 Parameter Examples\n\nBoolean ParametersDouble ParametersString ParametersEnumerated Parameters\n\n\n{\n  \"kind\": \"BooleanProperty\",\n  \"name\": \"normalize.data\",\n  \"defaultValue\": false,\n  \"description\": \"Apply z-score normalization before analysis\"\n},\n{\n  \"kind\": \"BooleanProperty\",\n  \"name\": \"remove.outliers\",\n  \"defaultValue\": true,\n  \"description\": \"Automatically detect and exclude statistical outliers\"\n}\n\n\n{\n  \"kind\": \"DoubleProperty\",\n  \"name\": \"significance.threshold\",\n  \"defaultValue\": 0.05,\n  \"description\": \"P-value threshold for statistical significance\"\n},\n{\n  \"kind\": \"DoubleProperty\",\n  \"name\": \"outlier.threshold\",\n  \"defaultValue\": 1.5,\n  \"description\": \"IQR multiplier for outlier detection\"\n}\n\n\n{\n  \"kind\": \"StringProperty\",\n  \"name\": \"plot.title\",\n  \"defaultValue\": \"My Plot\",\n  \"description\": \"Title to be given to the plot.\"\n}\n\n\n{\n  \"kind\": \"EnumeratedProperty\",\n  \"name\": \"clustering.algorithm\",\n  \"defaultValue\": \"kmeans\",\n  \"description\": \"Clustering algorithm to use for analysis\",\n  \"values\": [\"kmeans\", \"hierarchical\", \"dbscan\", \"spectral\"]\n},\n{\n  \"kind\": \"EnumeratedProperty\",\n  \"name\": \"distance.metric\",\n  \"defaultValue\": \"euclidean\",\n  \"description\": \"Distance metric for similarity calculations\",\n  \"values\": [\"euclidean\", \"manhattan\", \"cosine\", \"jaccard\"]\n}",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#specifying-settings-in-the-operator.json",
    "href": "02-operator-development/5-advanced-features.html#specifying-settings-in-the-operator.json",
    "title": "9  Parameter Management and Configuration",
    "section": "9.4 Specifying settings in the operator.json",
    "text": "9.4 Specifying settings in the operator.json\n{\n  \"kind\": \"DataStep\",\n  \"version\": \"1.0.0\",\n  \"name\": \"Cell Statistics\",\n  \"description\": \"Calculate statistical summaries (mean, std dev, count) for each cell in the data projection\",\n  \"tags\": [\"statistics\", \"summary\", \"descriptive\"],\n  \"authors\": [\"Your Name\"],\n  \"urls\": [\"https://github.com/YOUR_ORGANISATION/cell_statistics_operator\"],\n  \"properties\": [\n    {\n      \"kind\": \"BooleanProperty\",\n      \"name\": \"include.std.dev\",\n      \"defaultValue\": true,\n      \"description\": \"Include standard deviation in the output statistics\"\n    },\n    {\n      \"kind\": \"IntegerProperty\",\n      \"name\": \"min.observations\",\n      \"defaultValue\": 1,\n      \"description\": \"Minimum number of observations required per cell to compute statistics\"\n    },\n    {\n      \"kind\": \"BooleanProperty\",\n      \"name\": \"exclude.outliers\",\n      \"defaultValue\": false,\n      \"description\": \"Exclude outliers using IQR method before computing statistics\"\n    },\n    {\n      \"kind\": \"DoubleProperty\",\n      \"name\": \"outlier.threshold\",\n      \"defaultValue\": 1.5,\n      \"description\": \"IQR multiplier for outlier detection (only used if exclude.outliers is true)\"\n    }\n  ]\n}",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#advanced-parameter-patterns",
    "href": "02-operator-development/5-advanced-features.html#advanced-parameter-patterns",
    "title": "9  Parameter Management and Configuration",
    "section": "9.5 Advanced Parameter Patterns",
    "text": "9.5 Advanced Parameter Patterns\n\nR Parameter AccessPython Parameter Access\n\n\n# Accessing different parameter types\nmethod &lt;- ctx$op.value('method', as.character, 'mean')\nthreshold &lt;- ctx$op.value('threshold', as.numeric, 0.05)\niterations &lt;- ctx$op.value('iterations', as.integer, 100L)\nenabled &lt;- ctx$op.value('enabled', as.logical, TRUE)\n\n# Parameter validation\nvalid_methods &lt;- c('mean', 'median', 'trimmed')\nif (!method %in% valid_methods) {\n  stop(paste(\"Invalid method:\", method, \". Must be one of:\", paste(valid_methods, collapse=\", \")))\n}\n\nif (threshold &lt; 0 || threshold &gt; 1) {\n  stop(\"Threshold must be between 0 and 1\")\n}\n\n\n# Accessing different parameter types\nmethod = tercenCtx.op.value('method', 'mean')\nthreshold = float(tercenCtx.op.value('threshold', 0.05))\niterations = int(tercenCtx.op.value('iterations', 100))\nenabled = tercenCtx.op.value('enabled', True)\n\n# Parameter validation\nvalid_methods = ['mean', 'median', 'trimmed']\nif method not in valid_methods:\n    raise ValueError(f\"Invalid method: {method}. Must be one of: {', '.join(valid_methods)}\")\n\nif not 0 &lt;= threshold &lt;= 1:\n    raise ValueError(\"Threshold must be between 0 and 1\")",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#parameter-grouping-and-organization",
    "href": "02-operator-development/5-advanced-features.html#parameter-grouping-and-organization",
    "title": "9  Parameter Management and Configuration",
    "section": "9.6 Parameter Grouping and Organization",
    "text": "9.6 Parameter Grouping and Organization\nFor complex operators with many parameters, organize them logically:\n{\n  \"name\": \"advanced-analysis\",\n  \"properties\": [\n    {\n      \"comment\": \"=== Data Processing Options ===\",\n      \"kind\": \"StringProperty\",\n      \"name\": \"preprocessing.method\",\n      \"value\": \"standardize\",\n      \"enumValues\": [\"none\", \"normalize\", \"standardize\", \"robust\"]\n    },\n    {\n      \"kind\": \"BooleanProperty\",\n      \"name\": \"preprocessing.remove_outliers\",\n      \"defaultValue\": false\n    },\n    {\n      \"comment\": \"=== Analysis Parameters ===\",\n      \"kind\": \"EnumeratedProperty\",\n      \"name\": \"analysis.algorithm\",\n      \"defaultValue\": \"pca\",\n      \"enumValues\": [\"pca\", \"ica\", \"factor\", \"cluster\"]\n    },\n    {\n      \"kind\": \"IntegerProperty\",\n      \"name\": \"analysis.components\",\n      \"defaultValue\": 2,\n      \"minValue\": 1,\n      \"maxValue\": 50\n    },\n    {\n      \"comment\": \"=== Output Options ===\",\n      \"kind\": \"BooleanProperty\",\n      \"name\": \"output.include_variance\",\n      \"defaultValue\": true\n    },\n    {\n      \"kind\": \"BooleanProperty\",\n      \"name\": \"output.include_loadings\",\n      \"defaultValue\": false\n    }\n  ]\n}",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#best-practices-for-parameter-design",
    "href": "02-operator-development/5-advanced-features.html#best-practices-for-parameter-design",
    "title": "9  Parameter Management and Configuration",
    "section": "9.7 Best Practices for Parameter Design",
    "text": "9.7 Best Practices for Parameter Design\n\nProvide Sensible Defaults: Most users should be able to run your operator without changing parameters\nUse Clear Names: Parameter names should be self-explanatory (threshold not t, min_samples not ms)\nGroup Related Parameters: Use prefixes to group parameters (output.format, output.precision)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/5-advanced-features.html#next-steps",
    "href": "02-operator-development/5-advanced-features.html#next-steps",
    "title": "9  Parameter Management and Configuration",
    "section": "9.8 Next Steps",
    "text": "9.8 Next Steps\nWith comprehensive parameter management in place, you’re ready to learn about operator specifications and formal metadata requirements. The next chapter covers the operator.json file, which defines your operator’s complete specifications and integration requirements.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Parameter Management and Configuration</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html",
    "href": "02-operator-development/6-operator-specifications.html",
    "title": "10  Operator Metadata and Specifications",
    "section": "",
    "text": "10.1 Overview of operator.json\nThis chapter covers the operator.json file, which defines your operator’s metadata, parameters, and formal specifications. This file is crucial for operator discovery, parameter configuration, and ensuring proper integration with Tercen’s type system and ontology.\nThe operator.json file serves multiple critical functions:",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#overview-of-operator.json",
    "href": "02-operator-development/6-operator-specifications.html#overview-of-operator.json",
    "title": "10  Operator Metadata and Specifications",
    "section": "",
    "text": "Metadata: Provides name, description, tags, and authorship information\nParameters: Defines user-configurable properties with types and defaults\nSpecifications: Formally describes input requirements and output guarantees\nDiscovery: Enables search and categorization in operator libraries\nValidation: Ensures type safety and proper data flow",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#basic-structure",
    "href": "02-operator-development/6-operator-specifications.html#basic-structure",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.2 Basic Structure",
    "text": "10.2 Basic Structure\nEvery operator.json file follows this fundamental structure:\n{\n  \"name\": \"Your Operator Name\",\n  \"description\": \"Brief description of what the operator does\",\n  \"tags\": [\"category1\", \"category2\"],\n  \"authors\": [\"author\"],\n  \"urls\": [\"https://github.com/username/repository\"],\n  \"properties\": [\n    // Parameter definitions\n  ],\n  \"operatorSpec\": {\n    // Formal input/output specifications\n  }\n}",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#metadata-configuration",
    "href": "02-operator-development/6-operator-specifications.html#metadata-configuration",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.3 Metadata Configuration",
    "text": "10.3 Metadata Configuration\n\n10.3.1 Basic Metadata Fields\nThe metadata section provides essential information about your operator:\n{\n  \"name\": \"Cell Statistics\",\n  \"description\": \"Calculate comprehensive statistical summaries (mean, std dev, count) for each cell in the data projection\",\n  \"tags\": [\n    \"statistics\",\n    \"descriptive statistics\", \n    \"summary\",\n    \"quality control\"\n  ],\n  \"authors\": [\n    \"Your Name\"\n  ],\n  \"urls\": [\n    \"https://github.com/yourusername/cell_statistics_operator\"\n  ]\n}\n\n\n10.3.2 Metadata Best Practices\n\n\n\nField\nGuidelines\nExamples\n\n\n\n\nname\nConcise, descriptive, title case\n“Linear Regression”, “PCA Analysis”, “Data Quality Check”\n\n\ndescription\nOne sentence explaining purpose\n“Calculate…” “Perform…” “Identify…”\n\n\ntags\nRelevant categories for discovery\n“statistics”, “machine learning”, “visualization”\n\n\nauthors\nName and email format\n“John Doe john@example.com”\n\n\nurls\nRepository and documentation links\nGitHub repo, documentation sites\n\n\n\n\n\n\n\n\n\nTagging Strategy\n\n\n\nUse a mix of broad categories (“statistics”, “visualization”) and specific terms (“regression”, “clustering”) to improve discoverability while maintaining precision.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#parameter-properties",
    "href": "02-operator-development/6-operator-specifications.html#parameter-properties",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.4 Parameter Properties",
    "text": "10.4 Parameter Properties\nParameters allow users to customize operator behavior. Each parameter is defined as a property with specific type, default value, and validation rules. If you’re not familiar with operator properties, they were covered in the previous chapter.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#operator-specifications",
    "href": "02-operator-development/6-operator-specifications.html#operator-specifications",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.5 Operator Specifications",
    "text": "10.5 Operator Specifications\nThe operatorSpec section formally describes your operator’s input requirements using Tercen’s ontology system.\n\n10.5.1 Basic Specification Structure\n{\n  \"operatorSpec\": {\n    \"kind\": \"OperatorSpec\",\n    \"ontologyUri\": \"https://tercen.com/_ontology/tercen\",\n    \"ontologyVersion\": \"0.0.1\",\n    \"inputSpecs\": [\n      // Input specifications\n    ],\n    \"outputSpecs\": [\n      // Output specifications  \n    ]\n  }\n}\n\n\n10.5.2 Input Specifications\nInput specs define what data your operator expects using the crosstab projection model:\n{\n  \"inputSpecs\": [\n    {\n      \"kind\": \"CrosstabSpec\",\n      \"metaFactors\": [\n        {\n          \"kind\": \"MetaFactor\",\n          \"name\": \"Sample\",\n          \"type\": \"\",\n          \"description\": \"Sample identifiers for grouping observations\",\n          \"ontologyMapping\": \"sample\",\n          \"crosstabMapping\": \"row\",\n          \"cardinality\": \"1..n\",\n          \"factors\": []\n        },\n        {\n          \"kind\": \"MetaFactor\", \n          \"name\": \"Variable\",\n          \"type\": \"\",\n          \"description\": \"Variable identifiers for measurement types\",\n          \"ontologyMapping\": \"variable\",\n          \"crosstabMapping\": \"column\",\n          \"cardinality\": \"1..n\",\n          \"factors\": []\n        }\n      ],\n      \"axis\": [\n        {\n          \"kind\": \"AxisSpec\",\n          \"metaFactors\": [\n            {\n              \"kind\": \"MetaFactor\",\n              \"name\": \"Measurement\",\n              \"type\": \"numeric\",\n              \"description\": \"Numeric values for statistical computation\",\n              \"ontologyMapping\": \"measurement\",\n              \"crosstabMapping\": \"y\",\n              \"cardinality\": \"1..n\",\n              \"factors\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n10.5.3 Understanding MetaFactors\nMetaFactors define the semantic meaning of data elements:\n\n\n\n\n\n\n\n\nField\nPurpose\nExamples\n\n\n\n\nname\nHuman-readable identifier\n“Sample”, “Gene”, “Time Point”\n\n\ntype\nData type constraint\n“numeric”, “categorical”, “” (any)\n\n\ndescription\nDetailed explanation\n“Gene expression measurements”\n\n\nontologyMapping\nSemantic category\n“sample”, “variable”, “measurement”\n\n\ncrosstabMapping\nProjection component\n“row”, “column”, “y”, “x”, “color”, “label”\n\n\ncardinality\nRequired quantity\n“1” (exactly one), “1..n” (one or more), “0..1” (optional)\n\n\n\n\n\n10.5.4 Crosstab Mapping Options\n\n\n\nMapping\nPurpose\nTypical Use\n\n\n\n\nrow\nRow factors\nSample IDs, conditions, time points\n\n\ncolumn\nColumn factors\nVariables, genes, features\n\n\ny\nY-axis values\nPrimary measurements\n\n\nx\nX-axis values\nSecondary measurements\n\n\ncolor\nColor factors\nAdditional grouping variables\n\n\nlabel\nLabel factors\nAnnotations, metadata",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#complete-example-mean-operator",
    "href": "02-operator-development/6-operator-specifications.html#complete-example-mean-operator",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.6 Complete Example: Mean Operator",
    "text": "10.6 Complete Example: Mean Operator\nHere’s the complete operator.json for a mean calculation operator:\n{\n  \"name\": \"Mean\",\n  \"description\": \"Calculate the mathematical average of the data points in a cell.\",\n  \"tags\": [\n    \"descriptive statistics\",\n    \"summary statistics\", \n    \"basic statistics\"\n  ],\n  \"authors\": [\n    \"tercen\"\n  ],\n  \"urls\": [\n    \"https://github.com/tercen/mean_operator\"\n  ],\n  \"properties\": [\n    {\n      \"kind\": \"BooleanProperty\",\n      \"name\": \"exclude.na\",\n      \"defaultValue\": true,\n      \"description\": \"Exclude missing values from calculation\"\n    },\n    {\n      \"kind\": \"IntegerProperty\",\n      \"name\": \"min.observations\", \n      \"defaultValue\": 1,\n      \"description\": \"Minimum number of non-missing observations required\",\n      \"minimum\": 1\n    }\n  ],\n  \"operatorSpec\": {\n    \"kind\": \"OperatorSpec\",\n    \"ontologyUri\": \"https://tercen.com/_ontology/tercen\",\n    \"ontologyVersion\": \"0.0.1\",\n    \"inputSpecs\": [\n      {\n        \"kind\": \"CrosstabSpec\",\n        \"metaFactors\": [\n          {\n            \"kind\": \"MetaFactor\",\n            \"name\": \"Sample\",\n            \"type\": \"\",\n            \"description\": \"Sample identifiers\",\n            \"ontologyMapping\": \"sample\",\n            \"crosstabMapping\": \"row\",\n            \"cardinality\": \"1..n\",\n            \"factors\": []\n          },\n          {\n            \"kind\": \"MetaFactor\",\n            \"name\": \"Variable\", \n            \"type\": \"\",\n            \"description\": \"Variable identifiers\",\n            \"ontologyMapping\": \"variable\",\n            \"crosstabMapping\": \"column\",\n            \"cardinality\": \"1..n\",\n            \"factors\": []\n          }\n        ],\n        \"axis\": [\n          {\n            \"kind\": \"AxisSpec\",\n            \"metaFactors\": [\n              {\n                \"kind\": \"MetaFactor\",\n                \"name\": \"Y-Axis Measurement\",\n                \"type\": \"numeric\",\n                \"description\": \"Measurement value, per cell\",\n                \"ontologyMapping\": \"measurement\",\n                \"crosstabMapping\": \"y\",\n                \"cardinality\": \"1..n\",\n                \"factors\": []\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"outputSpecs\": []\n  }\n}",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#optional-inputs",
    "href": "02-operator-development/6-operator-specifications.html#optional-inputs",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.7 Optional Inputs",
    "text": "10.7 Optional Inputs\nDefine optional inputs using cardinality:\n{\n  \"kind\": \"AxisSpec\",\n  \"metaFactors\": [\n    {\n      \"kind\": \"MetaFactor\",\n      \"name\": \"X-Axis Measurement (Optional)\",\n      \"type\": \"numeric\", \n      \"description\": \"Second measurement value, per cell (optional)\",\n      \"ontologyMapping\": \"measurement\",\n      \"crosstabMapping\": \"x\",\n      \"cardinality\": \"0..1\",\n      \"factors\": []\n    }\n  ]\n}",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#best-practices",
    "href": "02-operator-development/6-operator-specifications.html#best-practices",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.8 Best Practices",
    "text": "10.8 Best Practices\n\nStart Simple: Begin with basic specs and add complexity gradually\nBe Specific: Provide detailed descriptions for all components\nUse Standards: Follow established ontology mappings\n\nEnsure your specifications align with your documentation:\n\nParameter descriptions match README explanations\nInput specs reflect actual requirements",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#next-steps",
    "href": "02-operator-development/6-operator-specifications.html#next-steps",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.9 Next Steps",
    "text": "10.9 Next Steps\nWith a complete operator.json file, your operator is properly specified and ready for integration with Tercen’s ecosystem. The next chapter covers comprehensive documentation and deployment strategies to make your operator production-ready.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/6-operator-specifications.html#key-takeaways",
    "href": "02-operator-development/6-operator-specifications.html#key-takeaways",
    "title": "10  Operator Metadata and Specifications",
    "section": "10.10 Key Takeaways",
    "text": "10.10 Key Takeaways\n\noperator.json is crucial for operator discovery and validation\nSpecifications provide type safety and semantic meaning\nProperties enable user customization with proper validation\nComplete specifications improve operator reliability and usability",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Operator Metadata and Specifications</span>"
    ]
  },
  {
    "objectID": "02-operator-development/7-documentation-deployment.html",
    "href": "02-operator-development/7-documentation-deployment.html",
    "title": "11  Documentation and Deployment",
    "section": "",
    "text": "11.1 Documentation Best Practices\nThis chapter covers creating comprehensive documentation and deploying your operator to production. Building on the operator specifications from the previous chapter, you’ll learn how to create user-friendly documentation and manage the deployment process. Good documentation is essential for user adoption, while proper deployment ensures reliability and maintainability.\nComprehensive documentation is crucial for operator adoption and maintenance. Users need to understand what your operator does, how to use it, and how to interpret the results.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Documentation and Deployment</span>"
    ]
  },
  {
    "objectID": "02-operator-development/7-documentation-deployment.html#documentation-best-practices",
    "href": "02-operator-development/7-documentation-deployment.html#documentation-best-practices",
    "title": "11  Documentation and Deployment",
    "section": "",
    "text": "11.1.1 README.md Structure\nYour README should follow this proven structure:\n# [Operator Name]\n\n[One-sentence description of what the operator does]\n\n## Description\n\n[Detailed explanation of the operator's purpose and computational approach]\n\nThis operator implements [specific algorithm/method] for [use case]. It is useful for:\n\n- [Primary use case 1]\n- [Primary use case 2]\n- [Primary use case 3]\n\n## Input Projection\n\n- **Y-axis**: [Description of required y-axis data]\n- **Row factors**: [How row factors are used]\n- **Column factors**: [How column factors are used]\n- **Color factors**: [Usage or \"Not used\"]\n- **Label factors**: [Usage or \"Not used\"]\n\n## Output\n\n- **Output relation**: [Per cell/per row/per column/global]\n- **Output columns**:\n  - `column1`: [Description and data type]\n  - `column2`: [Description and data type]\n- **Data types**: [Summary of output data types]\n\n## Parameters\n\n| Parameter | Type | Default | Description |\n|-----------|------|---------|-------------|\n| param1 | Boolean | true | [Detailed description] |\n| param2 | Double | 10 | [Detailed description] |\n\n## Usage Example\n\n[Step-by-step usage instructions with screenshots if helpful]\n\n## Implementation Notes\n\n[Important technical details, limitations, assumptions]\n\n## References\n\n[Academic references or links to relevant documentation]",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Documentation and Deployment</span>"
    ]
  },
  {
    "objectID": "02-operator-development/7-documentation-deployment.html#dependency-management",
    "href": "02-operator-development/7-documentation-deployment.html#dependency-management",
    "title": "11  Documentation and Deployment",
    "section": "11.2 Dependency Management",
    "text": "11.2 Dependency Management\nProper dependency management ensures your operator works reliably across different environments.\n\n11.2.1 R\n\nUsing renvPython Dependency Management\n\n\n# In your operator's main directory, initialize renv\nrenv::init()\n\n# Snapshot the environment\nrenv::snapshot()\n\n# Your renv.lock file will be automatically created and should be committed\n\n\n# Create requirements.txt with essential packages\npip freeze &gt; requirements.txt",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Documentation and Deployment</span>"
    ]
  },
  {
    "objectID": "02-operator-development/7-documentation-deployment.html#version-control-best-practices",
    "href": "02-operator-development/7-documentation-deployment.html#version-control-best-practices",
    "title": "11  Documentation and Deployment",
    "section": "11.3 Version Control Best Practices",
    "text": "11.3 Version Control Best Practices\n\n11.3.1 Git Workflow\nImplement a clean git workflow for your operator development:\n# Feature development workflow\ngit checkout -b feature/add-outlier-detection\n# Make your changes\ngit add .\ngit commit -m \"Add outlier detection with IQR method\"\n\n# Create pull request for review\ngit push origin feature/add-outlier-detection\n\n# After review and merge\ngit checkout main\ngit pull origin main\ngit branch -d feature/add-outlier-detection\n\n\n11.3.2 Semantic Versioning\nUse semantic versioning for your releases:\n\nMAJOR.MINOR.PATCH (e.g., 1.2.3)\nMAJOR: Breaking changes to operator interface\nMINOR: New features, backward compatible\nPATCH: Bug fixes, backward compatible\n\n\n\n11.3.3 Release Management\nCreate structured releases with proper documentation:\n# Prepare release\ngit checkout main\ngit pull origin main\n\n# Update version in operator.json\n# Update CHANGELOG.md with release notes\n\n# Commit version changes\ngit add .\ngit commit -m \"Release version 1.2.0\"\n\n# Create and push tag\ngit tag v1.2.0\ngit push origin main\ngit push origin v1.2.0",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Documentation and Deployment</span>"
    ]
  },
  {
    "objectID": "02-operator-development/7-documentation-deployment.html#deployment-preparation",
    "href": "02-operator-development/7-documentation-deployment.html#deployment-preparation",
    "title": "11  Documentation and Deployment",
    "section": "11.4 Deployment Preparation",
    "text": "11.4 Deployment Preparation\n\n11.4.1 Repository Structure Final Check\nEnsure your complete operator repository has this structure:\nyour_operator_repository/\n├── .github/\n│   └── workflows/          # CI/CD automation\n├── main.R                  # Main operator implementation (R)\n├── main.py                 # Main operator implementation (Python)\n├── operator.json           # Operator metadata and parameters\n├── README.md               # Comprehensive documentation\n├── requirements.txt        # Python dependencies\n├── renv.lock              # R dependencies snapshot\n└── test/                  # Test files and data (recommended)\n    ├── input.csv\n    ├── output.csv\n    ├── test.json\n    └── README.md",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Documentation and Deployment</span>"
    ]
  },
  {
    "objectID": "02-operator-development/7-documentation-deployment.html#congratulations",
    "href": "02-operator-development/7-documentation-deployment.html#congratulations",
    "title": "11  Documentation and Deployment",
    "section": "11.5 Congratulations!",
    "text": "11.5 Congratulations!\nYou’ve successfully learned the complete operator development workflow! Your operator is now ready for release and installation in a Tercen environment.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Documentation and Deployment</span>"
    ]
  },
  {
    "objectID": "02-operator-development/7-documentation-deployment.html#next-steps",
    "href": "02-operator-development/7-documentation-deployment.html#next-steps",
    "title": "11  Documentation and Deployment",
    "section": "11.6 Next Steps",
    "text": "11.6 Next Steps\nThe next chapters in this guide cover these advanced topics and specialized development scenarios.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Documentation and Deployment</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html",
    "href": "02-operator-development/8-ci.html",
    "title": "12  Continuous Integration Workflow",
    "section": "",
    "text": "12.1 General idea",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#general-idea",
    "href": "02-operator-development/8-ci.html#general-idea",
    "title": "12  Continuous Integration Workflow",
    "section": "",
    "text": "Everytime you push a new commit, a GitHub Workflow will be triggered.\nThis workflow will build and push the Docker image containing the operator code and its execution environment .\nThis workflow is specified in a YAML file you can find in the /.github/workflows directory.\nIn this chapter, we will explain each section of the /.github/workflows/ci.yaml step-by-step to clarify its purpose and functionality.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#workflow-name-and-trigger",
    "href": "02-operator-development/8-ci.html#workflow-name-and-trigger",
    "title": "12  Continuous Integration Workflow",
    "section": "12.2 1. Workflow Name and Trigger",
    "text": "12.2 1. Workflow Name and Trigger\nname: CI Workflow\n\non:\n  push:\n    branches: ['main']\nThe workflow is named CI Workflow, which is mainly for identification purposes within the GitHub Actions dashboard. The workflow is triggered by a push event, but only for the main branch. This means that every time code is pushed to the main branch of the repository, this workflow will automatically run.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#environment-variables",
    "href": "02-operator-development/8-ci.html#environment-variables",
    "title": "12  Continuous Integration Workflow",
    "section": "12.3 2. Environment Variables",
    "text": "12.3 2. Environment Variables\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\nTwo environment variables are defined here:\n\nREGISTRY: This is set to ghcr.io, which stands for GitHub Container Registry. It is the domain where the Docker images will be stored.\nIMAGE_NAME: This variable is dynamically set to the name of the GitHub repository using github.repository. The ${{ github.repository }} syntax is GitHub’s way of accessing context values, such as the repository name.\n\nThe image name will be used later when tagging the Docker image.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#job-definition-build-and-push-image",
    "href": "02-operator-development/8-ci.html#job-definition-build-and-push-image",
    "title": "12  Continuous Integration Workflow",
    "section": "12.4 3. Job Definition: build-and-push-image",
    "text": "12.4 3. Job Definition: build-and-push-image\nThe core of the workflow is defined within a single job called build-and-push-image.\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n      attestations: write\n      id-token: write\n\nruns-on: ubuntu-latest: The job will run on the latest available version of Ubuntu. This provides a virtual machine with all the necessary tools to run Docker and interact with GitHub.\npermissions: This section grants specific permissions to the job:\n\ncontents: read: Allows reading the repository’s contents (code, files).\npackages: write: Allows publishing Docker images to GitHub Packages.\nattestations: write: Grants access to manage attestations, which are metadata related to builds.\nid-token: write: Allows the job to issue ID tokens for authentication, commonly used with OpenID Connect for secure token exchanges.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#steps-in-the-workflow",
    "href": "02-operator-development/8-ci.html#steps-in-the-workflow",
    "title": "12  Continuous Integration Workflow",
    "section": "12.5 4. Steps in the Workflow",
    "text": "12.5 4. Steps in the Workflow\nThis job consists of several steps, each performing a crucial task in the workflow.\n\n12.5.1 Step 1: Checkout Repository\n- name: Checkout repository\n  uses: actions/checkout@v4\nThe first step uses the actions/checkout action, version v4. This action checks out the repository code so that it can be accessed in the subsequent steps. Without this step, the job wouldn’t be able to access the files in the repository.\n\n\n12.5.2 Step 2: Log in to the Container Registry\n- name: Log in to the Container registry\n  uses: docker/login-action@v3.3.0\n  with:\n    registry: ${{ env.REGISTRY }}\n    username: ${{ github.actor }}\n    password: ${{ secrets.GITHUB_TOKEN }}\nIn this step, the workflow logs into GitHub’s Container Registry (ghcr.io) using the docker/login-action. This action allows you to authenticate to a container registry, enabling the workflow to push Docker images.\n\nregistry: Set to the value of ${{ env.REGISTRY }} (ghcr.io).\nusername: Set to ${{ github.actor }}, which represents the username of the person or bot that triggered the workflow.\npassword: Set to ${{ secrets.GITHUB_TOKEN }}, a built-in secret provided by GitHub to authenticate the workflow. This token allows the workflow to access the repository’s packages and perform the necessary actions.\n\n\n\n12.5.3 Step 3: Extract Docker Metadata (Tags and Labels)\n- name: Extract metadata (tags, labels) for Docker\n  id: meta\n  uses: docker/metadata-action@v5.5.1\n  with:\n    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\nThis step uses the docker/metadata-action to extract metadata (such as tags and labels) from the repository and build context. The extracted metadata will be used later when tagging the Docker image.\n\nid: meta: This assigns an identifier meta to the step, making its outputs accessible in later steps.\nimages: This specifies the base name for the Docker image, which is constructed from the container registry and the repository name.\n\nThe output from this step is crucial for correctly tagging and labeling the Docker image in the next step.\n\n\n12.5.4 Step 4: Build and Push Docker Image\n- name: Build and push Docker image\n  id: push\n  uses: docker/build-push-action@v6.7.0\n  with:\n    context: .\n    push: true\n    tags: ${{ steps.meta.outputs.tags }}\n    labels: ${{ steps.meta.outputs.labels }}\nIn this final step, the docker/build-push-action is used to:\n\nBuild a Docker image using the repository’s Dockerfile.\nPush the built image to the GitHub Container Registry.\n\nKey parameters in this step:\n\ncontext: Set to . (the current directory). This specifies the build context, meaning the files in the repository’s root directory will be used for the Docker build.\npush: Set to true. This ensures the Docker image is automatically pushed to the registry after it is built.\ntags: The tags for the image, provided by the output of the meta step (${{ steps.meta.outputs.tags }}).\nlabels: Additional labels for the image, also provided by the meta step (${{ steps.meta.outputs.labels }}).\n\n\n\n12.5.5 Optional: Personal Access Token\n# A PAT is needed for this action, GITHUB_TOKEN cannot get relevant permission \n# secrets: |\n#   github_pat=${{ secrets.GH_PAT }}\nThis is an optional comment explaining that if higher-level permissions are required, a Personal Access Token (PAT) should be used instead of the default GITHUB_TOKEN. This would be defined as a secret (GH_PAT).",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#conclusion",
    "href": "02-operator-development/8-ci.html#conclusion",
    "title": "12  Continuous Integration Workflow",
    "section": "12.6 Conclusion",
    "text": "12.6 Conclusion\nThis CI pipeline builds and pushes Docker images to GitHub Container Registry every time changes are made to the main branch. The workflow:\n\nChecks out the repository.\nLogs into the container registry.\nExtracts metadata to tag and label the image.\nBuilds and pushes the Docker image to the registry.\n\nBy using GitHub Actions and Docker together, this workflow automates the process of containerizing code and storing it in a centralized registry, enabling future installation from Tercen.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#edit-the-operator.json-file",
    "href": "02-operator-development/8-ci.html#edit-the-operator.json-file",
    "title": "12  Continuous Integration Workflow",
    "section": "13.1 1. Edit the operator.json file",
    "text": "13.1 1. Edit the operator.json file\nYou should first edit the container field of the operator.json file so that it matched the version number you would like to push (here, 0.0.1 for example).",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#push-your-changes-and-tag-the-repository",
    "href": "02-operator-development/8-ci.html#push-your-changes-and-tag-the-repository",
    "title": "12  Continuous Integration Workflow",
    "section": "13.2 2. Push your changes and tag the repository",
    "text": "13.2 2. Push your changes and tag the repository\nAfter pushing your latest commit, you can add the same version number as a tag from the command line as follows:\ngit tag 0.0.1\nThen push it with this command:\ngit push --tags",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/8-ci.html#wait-and-check-the-results-of-the-release-workflow",
    "href": "02-operator-development/8-ci.html#wait-and-check-the-results-of-the-release-workflow",
    "title": "12  Continuous Integration Workflow",
    "section": "13.3 3. Wait and check the results of the release workflow",
    "text": "13.3 3. Wait and check the results of the release workflow\nThe same way a workflow is triggered after each commit, tagging a repository will trigger another workflow, release.yaml. This workflow that will build and push the Docker image, tag it with the run the unit tests. Once the workflow is run, you can verify it has been successful. If that is the case, you are now ready to install your operator in a Library.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "02-operator-development/9-installation.html",
    "href": "02-operator-development/9-installation.html",
    "title": "13  Installing an Operator",
    "section": "",
    "text": "13.1 Understanding Tercen Libraries\nOnce your operator is tested and documented, the final step is making it available to users through Tercen’s library system. This chapter covers the installation process, library management, and best practices for deploying operators to production environments.\nTercen uses a library system to organize and distribute computational modules. Libraries provide a structured way to manage operators, templates, apps, and datasets while controlling access and maintaining quality standards.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Installing an Operator</span>"
    ]
  },
  {
    "objectID": "02-operator-development/9-installation.html#understanding-tercen-libraries",
    "href": "02-operator-development/9-installation.html#understanding-tercen-libraries",
    "title": "13  Installing an Operator",
    "section": "",
    "text": "13.1.1 Library Types\n\n\n\n\n\n\n\n\n\nLibrary Type\nDescription\nUse Case\nAccess\n\n\n\n\nTercen Library\nOfficial curated collection\nProduction-ready operators\nPublic\n\n\nCustom Libraries\nTeam or organization specific\nInternal/specialized operators\nControlled\n\n\nPersonal Libraries\nIndividual developer libraries\nDevelopment and testing\nPrivate\n\n\n\n\n\n\n\n\n\nLibrary Architecture\n\n\n\nLibraries in Tercen are implemented as specialized teams where: - The team itself represents the library - Projects within the team become available operators - Team permissions control library access - Git integration enables automated updates",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Installing an Operator</span>"
    ]
  },
  {
    "objectID": "02-operator-development/9-installation.html#setting-up-a-custom-library",
    "href": "02-operator-development/9-installation.html#setting-up-a-custom-library",
    "title": "13  Installing an Operator",
    "section": "13.2 Setting Up a Custom Library",
    "text": "13.2 Setting Up a Custom Library\n\n13.2.1 Library Creation Process\n\nCreate a New Team\n\nNavigate to your Tercen account dashboard\nClick “Teams” → “Create New Team”\nChoose a descriptive name (e.g., “MyOrganization Operators”)\n\nConfigure as Library Team\n\nGo to team settings\nEnable “Library team” option\nConfigure team visibility and permissions\n\nSet Access Permissions\n\nAdd team members as needed\nConfigure read/write permissions\nSet up approval workflows if required\n\n\n\n\n\n\n\n\nLibrary Naming Best Practices\n\n\n\n\nUse organization or project names for clarity\nInclude purpose in the name (e.g., “BioinformaticsLab Operators”)\nAvoid generic names like “MyLibrary” or “TestLib”\nConsider future growth and additional content types",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Installing an Operator</span>"
    ]
  },
  {
    "objectID": "02-operator-development/9-installation.html#installing-operators",
    "href": "02-operator-development/9-installation.html#installing-operators",
    "title": "13  Installing an Operator",
    "section": "13.3 Installing Operators",
    "text": "13.3 Installing Operators\n\n13.3.1 Git Integration Method\nTercen’s preferred method for operator installation uses direct Git integration:\n\nNavigate to Your Library\n\nAccess your custom library (team)\nEnsure you have appropriate permissions\n\nAdd New Project\n\nClick “New Project”\nSelect “From Git”\n\nConfigure Repository Details\nName:       my_analysis_operator\nURL:        https://github.com/myorg/my_analysis_operator\nTag:        1.0.0 (optional - for specific versions)\nAuth Token: github_pat_xxxxx (if repository is private)\nComplete Installation\n\nReview settings\nClick “Create Project”\nWait for repository cloning and validation\n\n\n\n\n\n\n\n\nAuthentication Requirements\n\n\n\nFor private repositories, you’ll need: - Personal Access Token (PAT) for GitHub - Appropriate repository permissions - Token with repo scope for full access",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Installing an Operator</span>"
    ]
  },
  {
    "objectID": "02-operator-development/9-installation.html#operator-availability-and-testing",
    "href": "02-operator-development/9-installation.html#operator-availability-and-testing",
    "title": "13  Installing an Operator",
    "section": "13.4 Operator Availability and Testing",
    "text": "13.4 Operator Availability and Testing\n\n13.4.1 Verification Steps\nAfter installation, verify your operator is working correctly:\n\nCheck Library Listing\n\nConfirm operator appears in library\nVerify metadata is displayed correctly\n\nTest in Workflow\n\nCreate a new workflow\nAdd a data step\nSearch for your operator\nTest with sample data\n\nValidate Functionality\n\nRun with different input configurations\nVerify output correctness\nCheck error handling",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Installing an Operator</span>"
    ]
  },
  {
    "objectID": "02-operator-development/9-installation.html#version-management",
    "href": "02-operator-development/9-installation.html#version-management",
    "title": "13  Installing an Operator",
    "section": "13.5 Version Management",
    "text": "13.5 Version Management\n\n13.5.1 Operator Updates\nTo update an installed operator:\n\nPush changes to Git repository\nTag new version (recommended)\nTrigger library refresh in Tercen\n\n\n\n13.5.2 Version Control Best Practices\n\nUse semantic versioning (e.g., 1.0.1)\nTag stable releases in Git",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Installing an Operator</span>"
    ]
  },
  {
    "objectID": "02-operator-development/9-installation.html#next-steps",
    "href": "02-operator-development/9-installation.html#next-steps",
    "title": "13  Installing an Operator",
    "section": "13.6 Next Steps",
    "text": "13.6 Next Steps\nWith your operator successfully installed and available to users, consider:\n\nMonitoring usage patterns and feedback\nPlanning feature enhancements based on user needs\nExploring advanced deployment automation",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Installing an Operator</span>"
    ]
  },
  {
    "objectID": "02-operator-development/10-input-output-patterns.html",
    "href": "02-operator-development/10-input-output-patterns.html",
    "title": "14  Data Input and Output Patterns",
    "section": "",
    "text": "14.1 Understanding Tercen’s Data Structure\nThis chapter covers advanced patterns for handling data input and output in Tercen operators. Building on the basic concepts from previous chapters, we’ll explore sophisticated techniques for data manipulation, multiple output types, and complex data relationships.\nTercen organizes data using a projection system with specific index columns:\nThese special columns enable flexible data aggregation and output patterns.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Data Input and Output Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/10-input-output-patterns.html#understanding-tercens-data-structure",
    "href": "02-operator-development/10-input-output-patterns.html#understanding-tercens-data-structure",
    "title": "14  Data Input and Output Patterns",
    "section": "",
    "text": "Column\nPurpose\nUsage\n\n\n\n\n.ri\nRow index\nIdentifies specific rows in the data projection\n\n\n.ci\nColumn index\nIdentifies specific columns in the data projection\n\n\n.y\nData values\nThe actual measurement or observation values\n\n\n.x\nX-axis values\nIndependent variable values (when applicable)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Data Input and Output Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/10-input-output-patterns.html#basic-output-patterns",
    "href": "02-operator-development/10-input-output-patterns.html#basic-output-patterns",
    "title": "14  Data Input and Output Patterns",
    "section": "14.2 Basic Output Patterns",
    "text": "14.2 Basic Output Patterns\n\n14.2.1 Per-Cell Output (Default)\nMost operators output one result per cell, maintaining the original data structure:\n\nRPython\n\n\nlibrary(tercen)\nlibrary(dplyr)\n\n# Connect to Tercen context\nctx &lt;- tercenCtx()\n\n# Per-cell calculation (e.g., log transformation)\nresult &lt;- ctx %&gt;%\n  select(.ri, .ci, .y) %&gt;%\n  mutate(log_value = log(.y + 1)) %&gt;%\n  select(.ri, .ci, log_value) %&gt;%\n  ctx$addNamespace()\n\nctx$save(result)\n\n\nfrom tercen.client import context as ctx\nimport polars as pl\n\n# Connect to Tercen context\ntercenCtx = ctx.TercenContext()\n\n# Per-cell calculation\ndf = (\n    tercenCtx\n    .select(['.ri', '.ci', '.y'], df_lib=\"polars\")\n    .with_columns([\n        (pl.col('.y') + 1).log().alias('log_value')\n    ])\n    .select(['.ri', '.ci', 'log_value'])\n)\n\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)\n\n\n\n\n\n14.2.2 Per-Row Output\nAggregate data across columns for each row:\n\nRPython\n\n\n# Calculate statistics per row\nrow_stats &lt;- ctx %&gt;%\n  select(.ri, .ci, .y) %&gt;%\n  group_by(.ri) %&gt;%\n  summarise(\n    mean_value = mean(.y, na.rm = TRUE),\n    sd_value = sd(.y, na.rm = TRUE),\n    count = n(),\n    .groups = \"drop\"\n  ) %&gt;%\n  ctx$addNamespace()\n\nctx$save(row_stats)\n\n\n# Calculate statistics per row\ndf = (\n    tercenCtx\n    .select(['.ri', '.ci', '.y'], df_lib=\"polars\")\n    .group_by(['.ri'])\n    .agg([\n        pl.col('.y').mean().alias('mean_value'),\n        pl.col('.y').std().alias('sd_value'),\n        pl.col('.y').count().alias('count')\n    ])\n)\n\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)\n\n\n\n\n\n14.2.3 Per-Column Output\nAggregate data across rows for each column:\n\nRPython\n\n\n# Calculate statistics per column\ncol_stats &lt;- ctx %&gt;%\n  select(.ri, .ci, .y) %&gt;%\n  group_by(.ci) %&gt;%\n  summarise(\n    median_value = median(.y, na.rm = TRUE),\n    q25 = quantile(.y, 0.25, na.rm = TRUE),\n    q75 = quantile(.y, 0.75, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  ctx$addNamespace()\n\nctx$save(col_stats)\n\n\n# Calculate statistics per column\ndf = (\n    tercenCtx\n    .select(['.ri', '.ci', '.y'], df_lib=\"polars\")\n    .group_by(['.ci'])\n    .agg([\n        pl.col('.y').median().alias('median_value'),\n        pl.col('.y').quantile(0.25).alias('q25'),\n        pl.col('.y').quantile(0.75).alias('q75')\n    ])\n)\n\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Data Input and Output Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/10-input-output-patterns.html#advanced-output-patterns",
    "href": "02-operator-development/10-input-output-patterns.html#advanced-output-patterns",
    "title": "14  Data Input and Output Patterns",
    "section": "14.3 Advanced Output Patterns",
    "text": "14.3 Advanced Output Patterns\n\n14.3.1 Multiple Output Tables\nSome operators need to return multiple related datasets:\n\nRPython\n\n\n# Generate multiple output tables\nsummary_stats &lt;- ctx %&gt;%\n  select(.ri, .ci, .y) %&gt;%\n  summarise(\n    overall_mean = mean(.y, na.rm = TRUE),\n    overall_sd = sd(.y, na.rm = TRUE)\n  ) %&gt;%\n  ctx$addNamespace()\n\nrow_stats &lt;- ctx %&gt;%\n  select(.ri, .y) %&gt;%\n  group_by(.ri) %&gt;%\n  summarise(row_mean = mean(.y, na.rm = TRUE)) %&gt;%\n  ctx$addNamespace()\n\ncol_stats &lt;- ctx %&gt;%\n  select(.ci, .y) %&gt;%\n  group_by(.ci) %&gt;%\n  summarise(col_mean = mean(.y, na.rm = TRUE)) %&gt;%\n  ctx$addNamespace()\n\n# Save multiple tables\nctx$save(list(summary_stats, row_stats, col_stats))\n\n\n# Generate multiple output tables\nsummary_stats = (\n    tercenCtx\n    .select(['.y'], df_lib=\"polars\")\n    .select([\n        pl.col('.y').mean().alias('overall_mean'),\n        pl.col('.y').std().alias('overall_sd')\n    ])\n)\n\nrow_stats = (\n    tercenCtx\n    .select(['.ri', '.y'], df_lib=\"polars\")\n    .group_by(['.ri'])\n    .agg([pl.col('.y').mean().alias('row_mean')])\n)\n\ncol_stats = (\n    tercenCtx\n    .select(['.ci', '.y'], df_lib=\"polars\")\n    .group_by(['.ci'])\n    .agg([pl.col('.y').mean().alias('col_mean')])\n)\n\n# Add namespaces and save\nsummary_stats = tercenCtx.add_namespace(summary_stats)\nrow_stats = tercenCtx.add_namespace(row_stats)\ncol_stats = tercenCtx.add_namespace(col_stats)\n\ntercenCtx.save([summary_stats, row_stats, col_stats])\n\n\n\n\n\n14.3.2 Working with Factor Variables\nWhen your projection includes factors (categorical variables), incorporate them into your analysis:\n\nRPython\n\n\n# Include factors in analysis\nctx &lt;- tercenCtx()\n\n# Get factor columns\nfactors &lt;- ctx$rselect()  # Get all factors\n\nresult &lt;- ctx %&gt;%\n  select(.ri, .ci, .y) %&gt;%\n  left_join(factors, by = c(\".ri\", \".ci\")) %&gt;%\n  group_by(.ri, .ci, factor_column) %&gt;%  # Include relevant factors\n  summarise(\n    group_mean = mean(.y, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  ctx$addNamespace()\n\nctx$save(result)\n\n\n# Include factors in analysis\nfactors_df = tercenCtx.rselect(df_lib=\"polars\")\n\nresult = (\n    tercenCtx\n    .select(['.ri', '.ci', '.y'], df_lib=\"polars\")\n    .join(factors_df, on=['.ri', '.ci'], how='left')\n    .group_by(['.ri', '.ci', 'factor_column'])\n    .agg([pl.col('.y').mean().alias('group_mean')])\n)\n\nresult = tercenCtx.add_namespace(result)\ntercenCtx.save(result)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Data Input and Output Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/10-input-output-patterns.html#specialized-output-types",
    "href": "02-operator-development/10-input-output-patterns.html#specialized-output-types",
    "title": "14  Data Input and Output Patterns",
    "section": "14.4 Specialized Output Types",
    "text": "14.4 Specialized Output Types\n\n14.4.1 File Output\nTercen operators can generate and output files (plots, reports, data exports) that users can download or view directly in the interface. This is particularly useful for visualization operators, report generators, and data export tools.\n\n\n\n\n\n\nFile Output Use Cases\n\n\n\n\nPlots and Visualizations: PNG, PDF, SVG graphics\nReports: HTML, PDF documents with analysis results\nData Exports: CSV, Excel files with processed data\nConfiguration Files: JSON, YAML files for downstream tools\n\n\n\nSee the Patterns for Plot Operators chapter for a detailed tutorial on how to output files in Tercen.\n\n\n14.4.2 Relations Output\nRelations in Tercen support complex data linking and joining tables. This is useful for operators that need to create complex relationships between different data dimensions.\n\n\n\n\n\n\nWhen to Use Relations - Some examples\n\n\n\n\nPCA analysis with loadings and scores\nClustering with cluster assignments and centroids\n\nComplex statistical models with multiple output components\n\n\n\nKey relation functions: - as_relation(): Convert data frames to relations - left_join_relation(): Join relations together - save_relation(): Save relations to Tercen - as_join_operator(): Create join operators for complex relationships\n\nRPython\n\n\n# Example: Simple relation output\nlibrary(tibble)\n\n# Create a relation with results\nresult_relation &lt;- tibble(\n  component = c(\"PC1\", \"PC2\", \"PC3\"),\n  variance_explained = c(0.45, 0.32, 0.15),\n  eigenvalue = c(4.5, 3.2, 1.5)\n) %&gt;%\n  ctx$addNamespace() %&gt;%\n  as_relation()\n\n# Save relation\nctx$save_relation(result_relation)\n\n\nimport polars as pl\n\n# Create a relation with results\nresult_data = pl.DataFrame({\n    'component': ['PC1', 'PC2', 'PC3'],\n    'variance_explained': [0.45, 0.32, 0.15],\n    'eigenvalue': [4.5, 3.2, 1.5]\n})\n\nresult_relation = tercenCtx.add_namespace(result_data)\nresult_relation = tercenCtx.as_relation(result_relation)\n\n# Save relation\ntercenCtx.save_relation(result_relation)",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Data Input and Output Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/10-input-output-patterns.html#advanced-input-patterns",
    "href": "02-operator-development/10-input-output-patterns.html#advanced-input-patterns",
    "title": "14  Data Input and Output Patterns",
    "section": "14.5 Advanced Input Patterns",
    "text": "14.5 Advanced Input Patterns\n\n14.5.1 Reading Project Files\nSometimes operators need to access additional files stored in the same project:\n\nRPython\n\n\n# Get workflow and project information\nworkflow &lt;- ctx$context$client$workflowService$get(ctx$context$workflowId)\nproject_id &lt;- ctx$schema$projectId\n\n# Find project files\nproject_files &lt;- ctx$client$projectDocumentService$findProjectObjectsByFolderAndName(\n  c(project_id, \"ufff0\", \"ufff0\"),\n  c(project_id, \"\", \"\"),\n  useFactory = FALSE,\n  limit = 25000\n)\n\n# Find specific file\ntarget_file &lt;- \"config.csv\"\nfile_names &lt;- sapply(project_files, function(f) f$name)\nfile_index &lt;- which(grepl(target_file, file_names))[1]\n\nif (!is.na(file_index)) {\n  pf &lt;- project_files[[file_index]]\n  \n  # Download and read file\n  response &lt;- ctx$context$client$fileService$download(pf$id)\n  file_content &lt;- response$read()\n  \n  # Process as needed\n  if (is.raw(file_content)) {\n    file_content &lt;- rawToChar(file_content)\n  }\n  \n  # Use file content in analysis...\n}\n\n\n# Get project information\nproject_id = tercenCtx.schema.projectId\n\n# Find project files\nproject_files = tercenCtx.client.projectDocumentService.findProjectObjectsByFolderAndName(\n    [project_id, \"ufff0\", \"ufff0\"],\n    [project_id, \"\", \"\"], \n    useFactory=False, \n    limit=25000\n)\n\n# Find specific file\ntarget_file = 'config.csv'\nfnames = [f.name for f in project_files]\nmatching_files = [i for i, name in enumerate(fnames) if target_file in name]\n\nif matching_files:\n    pf = project_files[matching_files[0]]\n    \n    # Download and read file\n    resp = tercenCtx.context.client.fileService.download(pf.id)\n    file_content = resp.read()\n    \n    # Process as needed\n    if isinstance(file_content, bytes):\n        file_content = file_content.decode('utf-8')\n    \n    # Use file content in analysis...\n\n\n\n\n\n\n\n\n\nBest Practice\n\n\n\nAvoid manual file retrieval when possible. Instead, include files directly in the workflow input projection for better reproducibility and user experience.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Data Input and Output Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/10-input-output-patterns.html#next-steps",
    "href": "02-operator-development/10-input-output-patterns.html#next-steps",
    "title": "14  Data Input and Output Patterns",
    "section": "14.6 Next Steps",
    "text": "14.6 Next Steps\nWith these input and output patterns mastered, you can:\n\nCreate Complex Operators: Combine multiple patterns for sophisticated analyses\nHandle Edge Cases: Build robust operators that gracefully handle data issues\n\nOptimize Performance: Use efficient data processing techniques\nIntegrate with Workflows: Design operators that work seamlessly in Tercen pipelines\n\nThe next chapter covers continuous integration and deployment strategies for your operators.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Data Input and Output Patterns</span>"
    ]
  },
  {
    "objectID": "02-operator-development/11-operator-improvements.html",
    "href": "02-operator-development/11-operator-improvements.html",
    "title": "15  Operator Improvements and Best Practices",
    "section": "",
    "text": "15.1 Logging and Debugging\nThis chapter covers advanced techniques for improving operator quality, reliability, and maintainability. You’ll learn essential practices for logging, error handling, testing, and optimization that ensure your operators work robustly in production environments.\nEffective logging is essential for monitoring operator behavior and diagnosing issues in production environments.",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Operator Improvements and Best Practices</span>"
    ]
  },
  {
    "objectID": "02-operator-development/11-operator-improvements.html#logging-and-debugging",
    "href": "02-operator-development/11-operator-improvements.html#logging-and-debugging",
    "title": "15  Operator Improvements and Best Practices",
    "section": "",
    "text": "15.1.1 Basic Logging\nImplement logging for production operators:\n\nRPython\n\n\nctx$log(\"Your message.\")\n\n\nctx.log(\"Your message.\")\n\n\n\n\n\n\n\n\n\nLogging Best Practices\n\n\n\n\nLog key milestones: Start/end of major operations\nInclude data metrics: Row counts, processing times, memory usage\nLog parameter values: Help reproduce issues with specific inputs\nUse structured formats: Enable easier log parsing and analysis\nAvoid logging sensitive data: Protect user privacy and security",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Operator Improvements and Best Practices</span>"
    ]
  },
  {
    "objectID": "02-operator-development/11-operator-improvements.html#error-handling",
    "href": "02-operator-development/11-operator-improvements.html#error-handling",
    "title": "15  Operator Improvements and Best Practices",
    "section": "15.2 Error Handling",
    "text": "15.2 Error Handling\nImplement comprehensive error handling that provides helpful feedback to users:\n\nRPython\n\n\n# Comprehensive error handling with user-friendly messages\nrobust_operator &lt;- function(ctx) {\n  tryCatch({\n    # Validate inputs first\n    validate_inputs(ctx)\n    \n    # Main processing with progress logging\n    ctx$log(paste(\"[INFO]\", Sys.time(), \"- Beginning data analysis\"))\n    \n    # Check for edge cases\n    data &lt;- ctx$select(.ri, .ci, .y)\n    \n    if (any(is.infinite(data$.y))) {\n      ctx$log(paste(\"[WARNING]\", Sys.time(), \"- Infinite values detected, removing them\"))\n      data &lt;- data[is.finite(data$.y), ]\n    }\n    \n    if (nrow(data) == 0) {\n      stop(\"No valid data remaining after cleaning\")\n    }\n    \n    # Perform analysis\n    result &lt;- perform_analysis(data)\n    \n    ctx$log(paste(\"[INFO]\", Sys.time(), \"- Analysis completed successfully\"))\n    return(result)\n    \n  }, error = function(e) {\n    # Log the technical error\n    ctx$log(paste(\"[ERROR]\", Sys.time(), \"- Technical error:\", e$message))\n    \n    # Provide user-friendly error message\n    if (grepl(\"projection.*required\", e$message)) {\n      stop(\"Please ensure you have dragged the required data columns to the appropriate axes.\")\n    } else if (grepl(\"data points required\", e$message)) {\n      stop(\"This analysis requires at least 3 data points. Please check your data selection.\")\n    } else if (grepl(\"values must vary\", e$message)) {\n      stop(\"The data values do not vary enough for this analysis. Please check your input data.\")\n    } else {\n      stop(paste(\"An error occurred during analysis:\", e$message))\n    }\n  })\n}\n\n\ndef robust_operator(tercen_ctx):\n    \"\"\"Operator with comprehensive error handling\"\"\"\n    \n    try:\n        # Validate inputs first\n        validate_inputs(tercen_ctx)\n        \n        # Main processing with progress logging\n        tercen_ctx.log(f\"[INFO] {datetime.now()} - Beginning data analysis\")\n        \n        # Check for edge cases\n        df = tercen_ctx.select(['.ri', '.ci', '.y'], df_lib=\"polars\")\n        \n        # Handle infinite values\n        infinite_count = df.filter(pl.col('.y').is_infinite()).height\n        if infinite_count &gt; 0:\n            tercen_ctx.log(f\"[WARNING] {datetime.now()} - Infinite values detected ({infinite_count}), removing them\")\n            df = df.filter(pl.col('.y').is_finite())\n        \n        if len(df) == 0:\n            raise ValueError(\"No valid data remaining after cleaning\")\n        \n        # Perform analysis\n        result = perform_analysis(df)\n        \n        tercen_ctx.log(f\"[INFO] {datetime.now()} - Analysis completed successfully\")\n        return result\n        \n    except ValueError as ve:\n        tercen_ctx.log(f\"[ERROR] {datetime.now()} - Validation error: {str(ve)}\")\n        \n        # Provide user-friendly error messages\n        if \"projection\" in str(ve) and \"required\" in str(ve):\n            raise ValueError(\"Please ensure you have dragged the required data columns to the appropriate axes.\")\n        elif \"data points required\" in str(ve):\n            raise ValueError(\"This analysis requires at least 3 data points. Please check your data selection.\")\n        elif \"values must vary\" in str(ve):\n            raise ValueError(\"The data values do not vary enough for this analysis. Please check your input data.\")\n        else:\n            raise ValueError(f\"An error occurred during analysis: {str(ve)}\")\n            \n    except Exception as e:\n        tercen_ctx.log(f\"[ERROR] {datetime.now()} - Unexpected error: {str(e)}\")\n        raise ValueError(f\"An unexpected error occurred. Please check your data and try again. Error: {str(e)}\")\n\n\n\n\n\n\n\n\n\nError Handling Guidelines\n\n\n\n\nValidate early: Check inputs before expensive computations\nFail gracefully: Provide clear, actionable error messages\nLog technical details: Help with debugging while keeping user messages simple\nHandle edge cases: Account for missing data, infinite values, empty datasets\nTest error scenarios: Ensure error handling works as expected",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Operator Improvements and Best Practices</span>"
    ]
  },
  {
    "objectID": "02-operator-development/11-operator-improvements.html#testing-and-validation",
    "href": "02-operator-development/11-operator-improvements.html#testing-and-validation",
    "title": "15  Operator Improvements and Best Practices",
    "section": "15.3 Testing and Validation",
    "text": "15.3 Testing and Validation\nComprehensive testing ensures your operator works correctly across different data scenarios and edge cases.\n\n\n\n\n\n\nTesting Approaches\n\n\n\nTercen supports two main testing frameworks: 1. Unit Tests: Simple data files with expected input/output and test specifications 2. Integration Tests: Actual Tercen workflows triggered to perform computations\n\n\n\n15.3.1 Unit Test Structure\nCreate a tests directory in your operator repository with the following structure:\ntests/\n├── input.csv          # Sample input data\n├── output.csv         # Expected output data  \n├── test.json          # Test configuration\nFor multiple test scenarios, use numbered files: - test_1.json, test_2.json for different parameter settings - input_1.csv, input_2.csv for different data scenarios\n\n\n15.3.2 Creating Comprehensive Test Data\nDesign test cases that cover various scenarios:\n\n\n\n\n\n\n\n\nTest Scenario\nPurpose\nExample Data\n\n\n\n\nNormal Case\nStandard operation\nRegular numeric data with good distribution\n\n\nEdge Cases\nBoundary conditions\nMinimum data points, extreme values\n\n\nError Cases\nInvalid inputs\nMissing data, wrong data types\n\n\n\n\n\n15.3.3 Test Configuration File\nCreate comprehensive test.json files to specify how Tercen should run your tests:\nBasic Test Configuration:\n{\n  \"kind\": \"OperatorUnitTest\",\n  \"name\": \"regression_test_basic\",\n  \"namespace\": \"test\",\n  \"inputDataUri\": \"input.csv\",\n  \"outputDataUri\": [\"output.csv\"],\n  \"columns\": [],\n  \"rows\": [],\n  \"colors\": [],\n  \"labels\": [],\n  \"yAxis\": \".y\",\n  \"xAxis\": \".x\",\n  \"properties\": {\n    \"intercept.omit\": false,\n    \"confidence.level\": 0.95\n  }\n}\nThis completes our comprehensive guide to Tercen operator development. You now have all the tools and knowledge needed to create robust, efficient, and user-friendly operators that extend Tercen’s analytical capabilities!",
    "crumbs": [
      "Operator Development",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Operator Improvements and Best Practices</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/1-templates.html",
    "href": "03-workflow-templates/1-templates.html",
    "title": "16  Templates",
    "section": "",
    "text": "17 Building a template",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Templates</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/1-templates.html#what-is-a-template",
    "href": "03-workflow-templates/1-templates.html#what-is-a-template",
    "title": "16  Templates",
    "section": "17.1 What is a template?",
    "text": "17.1 What is a template?\nA template is a reusable Tercen workflow. It is typically developed when you want to quickly reuse a data analysis workflow with a new dataset.",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Templates</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/1-templates.html#general-development-workflow",
    "href": "03-workflow-templates/1-templates.html#general-development-workflow",
    "title": "16  Templates",
    "section": "17.2 General development workflow",
    "text": "17.2 General development workflow\nThe recommended test-driven development workflow is as follows:\n\nInitialise a GitHub repository for your workflow based on a template provided by Tercen\nClone this GitHub repository to your Tercen development instance\nLoad a minimal dataset that will serve the purpose of unit testing. Be mindful that this dataset and everything that is computed by the workflow will be stored in your repository, hence they should remain small.\nDevelop your workflow on your example dataset.\nPrepare the workflow template.\nPush your changes and deploy.",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Templates</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/1-templates.html#detailed-workflow",
    "href": "03-workflow-templates/1-templates.html#detailed-workflow",
    "title": "16  Templates",
    "section": "17.3 Detailed workflow",
    "text": "17.3 Detailed workflow\n1. Create the Template Repo\nCreate a new project based on the template repository.\n2. Import the repository into Tercen\nCreate a new project from Github.\n\n\n\n\n\n\n3. Create the Template Workflow\nCreate a standard Tercen workflow. Run the steps as needed.\nA finalized workflow might look like the one below.\n\n\n\n4. Clone and Rename\nClone the workflow to create the golden standard. Rename it with an unique **_gs** suffix (see naming convention).\n\n\n\n\n\n\nNaming Conventions\n\nA Template workflow is compared to its Golden Standard workflows based on a naming convention.\nA workflow is considered a Golden Standard if its name ends with **_gs**, where  is a set of letter and numbers. For example, Template_gs1, Template_gsA01 and Template_gsAA are all valid Golden Standard names, whereas Template_gs_01 is not.\nA Template and a Golden Standard are considered match if they have the same base name, that is, everything before the _gs suffix. For example, Workflow, Workflow_gs01 and Workflow_gs02 refer to a template (Workflow) and its two Golden Standards.\n\nOnce cloned, both Template and Golden Standard will be in the same folder. We want to move the Golden Standard workflow to a folder named workflow_tests. To do so, rename the Golden Standard, adding workflow_tests/ before the name and pressing the Ok button.\n\n\n\n5. Reset the Template Workflow\nOpen the Template Workflow (the one without the _gs** suffix), reset and save it.\n6. Select which elements to publish\nYou should now have at least two workflows as part of your project: the template and the gold standard. As we do not want the gold standard to be published in the library, you should make sure the “Publish” check box is unchecked for this workflow.\n7. Commit the Changes to Github\nFinally, select the Git button.\n\n\n\nThen, add any desired commit message, your personal Github token and press Ok.",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Templates</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/2-templates-ci.html",
    "href": "03-workflow-templates/2-templates-ci.html",
    "title": "17  Continuous Integration Workflow",
    "section": "",
    "text": "Here is a link to the Workflow CI Action that is triggered after each push. This GitHub Action is a continuous integration (CI) workflow that automates the process of testing a workflow template using the tercen/workflow_runner_operator Docker container.\nHere’s a breakdown of what each part of the workflow does:\n\n17.0.1 Inputs\nThe workflow accepts several inputs, which are parameters for the CI process:\n\ngit-repository (required): The GitHub repository containing the template to be tested.\nbranch (optional, defaults to main): The branch of the GitHub repository.\ntag (optional): A commit or version tag for the GitHub repository.\ngit-token (required): GitHub access token used to authenticate and access the repository.\nservice-uri (optional): The URI of a service to which the workflow will connect.\ntercen-username (optional): Tercen service username.\ntercen-password (optional): Tercen service password.\n\n\n\n17.0.2 Steps\n1. Start Tercen Services\nAction: tercen/actions/start-tercen@main Starts necessary Tercen services to facilitate the test environment.\n2. Log in to Docker Registry\nAction: docker/login-action@v3.3.0 Logs into the GitHub Container Registry (ghcr.io) using the GitHub actor’s credentials and the provided GitHub access token.\n3. Install Template Runner\nRun: Pulls the tercen/workflow_runner_operator:latest Docker image to run the workflow template tests.\n4. Test Template\nRun: Executes the tercen/workflow_runner_operator Docker container. Uses the inputs for the GitHub repository, username/password for Tercen, the service URI, and the GitHub token to execute the test run. The –report flag is used to generate a test report.\n5. Copy Result File\nRun: Copies the test results (a JSON file named test_results.json) from inside the Docker container (workflow_runner) to the local file system.\n6. Read Runner Results\nRun: Reads the test_results.json file and saves the contents into a GitHub output variable named JSON, removing spaces for easier processing.\n7. Check Runner Results\nCondition: If the Status field in the JSON output is not “Success,” the workflow will fail with exit 1. This ensures that the test results are evaluated before proceeding.\n8. Upload Runner Results\nAction: actions/upload-artifact@v3 The test results (test_results.json) are uploaded as an artifact with a retention of 7 days, allowing the results to be stored and accessed later.\n\n\n17.0.3 Summary\nCI testing is done by pulling a Docker container (tercen/workflow_runner_operator), running tests based on the specified GitHub repository, and evaluating the results. If the tests pass, the results are uploaded as artifacts for later inspection. If the tests fail, the workflow exits with an error.",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Continuous Integration Workflow</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/3-templates-installation.html",
    "href": "03-workflow-templates/3-templates-installation.html",
    "title": "18  Installing a Template",
    "section": "",
    "text": "18.1 Tercen Libraries\nTercen allows you to organize and manage modules (operators, templates, apps) and datasets within libraries. There are two types of libraries:",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Installing a Template</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/3-templates-installation.html#tercen-libraries",
    "href": "03-workflow-templates/3-templates-installation.html#tercen-libraries",
    "title": "18  Installing a Template",
    "section": "",
    "text": "Tercen Library: A curated list of modules and datasets maintained by the Tercen team.\nCustom Libraries: Personal or team-shared libraries that you can create and manage.",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Installing a Template</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/3-templates-installation.html#creating-a-custom-library",
    "href": "03-workflow-templates/3-templates-installation.html#creating-a-custom-library",
    "title": "18  Installing a Template",
    "section": "18.2 Creating a Custom Library",
    "text": "18.2 Creating a Custom Library\nTo install an operator, you first need to create a custom library. In Tercen, a library is a specialized type of team, and resources within the library (operators, templates, apps) are treated as specialized projects. This structure allows you to manage the library’s content and control access to your resources.\nSteps to Create a Custom Library:\n\nCreate a Team: Go to your Tercen account and create a new team (e.g., “MyLibrary”).\nEnable Library Team: Navigate to your team’s settings and select the “Library team” option to designate this team as a library.",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Installing a Template</span>"
    ]
  },
  {
    "objectID": "03-workflow-templates/3-templates-installation.html#installing-a-template-in-a-custom-library",
    "href": "03-workflow-templates/3-templates-installation.html#installing-a-template-in-a-custom-library",
    "title": "18  Installing a Template",
    "section": "18.3 Installing a Template in a Custom Library",
    "text": "18.3 Installing a Template in a Custom Library\nOnce your custom library is set up, you can use Tercen’s git integration to install templates:\n\nGo to your library (the team you created).\nClick on “New Project” and choose “From Git.”\nFill in the required fields:\n\nName: The name of the template.\nURL: The Git repository URL of the template.\nTag: The specific version or tag (optional).\nAuth Token: If required, provide an authentication token.\n\n\nThis process will clone the template’s repository into your custom library. It should now be available when you want to create a new workflow.",
    "crumbs": [
      "Workflow Template Development",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Installing a Template</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/1-patterns-plots.html",
    "href": "04-advanced-topics/1-patterns-plots.html",
    "title": "19  Patterns for Plot Operators",
    "section": "",
    "text": "19.1 Introduction\nThis tutorial demonstrates how to use Python with the tercen library to create custom plot operators. It covers:",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Patterns for Plot Operators</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/1-patterns-plots.html#introduction",
    "href": "04-advanced-topics/1-patterns-plots.html#introduction",
    "title": "19  Patterns for Plot Operators",
    "section": "",
    "text": "Connecting to the Tercen workflow to select data.\nCreating plots with Seaborn.\nEnhancing plots with advanced techniques like facet grids.\nHandling metadata for rows and columns.\nSaving and exporting plots back to Tercen.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Patterns for Plot Operators</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/1-patterns-plots.html#basic-scatter-plot",
    "href": "04-advanced-topics/1-patterns-plots.html#basic-scatter-plot",
    "title": "19  Patterns for Plot Operators",
    "section": "19.2 Basic Scatter Plot",
    "text": "19.2 Basic Scatter Plot\n\n19.2.1 Connecting to Tercen\nUse TercenContext to establish a connection with your Tercen workflow. Provide the required parameters, such as workflowId, stepId, authToken, and serviceUri.\nfrom tercen.client import context as ctx\n\ncontext = ctx.TercenContext(\n    workflowId=\"WORKFLOW_ID\",\n    stepId=\"STEP_ID\",\n    authToken=\"TOKEN\",\n    serviceUri=\"SERVICE_URI\"  \n)\n\n\n\n19.2.2 Accessing Operator Properties\nTercen allows custom operator configurations using properties. Here, the title property is retrieved with a default value:\nplot_title = context.operator_property(\"title\", str, default=\"My plot title\")\nYou can now use this property (e.g., as a plot title).\n\n\n\n19.2.3 Selecting Data\nThe select method retrieves data from Tercen’s workflow. For example, to extract x and y axis data:\ndf = context.select([\".x\", \".y\"], df_lib=\"pandas\")\nThe df_lib=\"pandas\" parameter specifies the data format, making it compatible with the Pandas library. The default setting will load a Polars data frame.\n\n\n\n19.2.4 Making the Plot\nVisualize the data using Seaborn:\nimport seaborn as sns\n\np = sns.scatterplot(data=df, x=\".x\", y=\".y\", linewidth=0, alpha=0.5, s=0.5)\np.set_xlabel(context.xAxis[0])\np.set_ylabel(context.yAxis[0])\nThis basic scatter plot uses .x and .y as coordinates and applies axis labels from the Tercen context.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Patterns for Plot Operators</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/1-patterns-plots.html#adding-color-to-plots",
    "href": "04-advanced-topics/1-patterns-plots.html#adding-color-to-plots",
    "title": "19  Patterns for Plot Operators",
    "section": "19.3 Adding Color to Plots",
    "text": "19.3 Adding Color to Plots\nUse the colors attribute from Tercen to include a color dimension in your plot:\ndf = context.select([\".x\", \".y\"] + context.colors, df_lib=\"pandas\")\n\np = sns.scatterplot(\n    data=df,\n    x=\".x\",\n    y=\".y\",\n    hue=context.colors[0],\n    palette=\"deep\",\n    linewidth=0,\n    alpha=0.5,\n    s=2\n)\nThe hue parameter maps the first color channel to the scatter plot. Note that multiple color factors can be specified. Instead of using the first one only like above, one could concatenate all color factors and use the newly created factor as a “hue”.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Patterns for Plot Operators</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/1-patterns-plots.html#faceted-plots",
    "href": "04-advanced-topics/1-patterns-plots.html#faceted-plots",
    "title": "19  Patterns for Plot Operators",
    "section": "19.4 Faceted Plots",
    "text": "19.4 Faceted Plots\n\n19.4.1 Row/Column Facetting\nAs the crosstab can be stratified by row and column factors, we can do the same in our plot and create a faceted grid:\ndf = context.select([\".x\", \".y\", \".ci\", \".ri\"] + context.colors, df_lib=\"pandas\")\ng = sns.FacetGrid(df, col=\".ci\", row=\".ri\")\ng.map(sns.scatterplot, \".x\", \".y\")\ng.set_axis_labels(x_var=\"X axis\", y_var=\"Y axis\")\nHere: - .ci (column index) and .ri (row index) define the facets. - FacetGrid generates a grid of plots.\n\n\n\n19.4.2 Dynamic Column and Row Names\nInclude additional metadata to enhance your facets and not use the row and column indices only:\ndf_row = context.rselect(df_lib=\"pandas\")\ndf_row[\".ri\"] = range(len(df_row))\n\ndf_col = context.cselect(df_lib=\"pandas\")\ndf_col[\".ci\"] = range(len(df_col))\n\ndf_plot = df.merge(df_col, how=\"left\", on=\".ci\").merge(df_row, how=\"left\", on=\".ri\")\nThis creates enriched dataframes with merged metadata, suitable for more dynamic faceting.\nWe need to handle scenarios where column or row names are empty:\ncn = context.cnames[0]\nif cn == '':\n    cn = None\n\nrn = context.rnames[0]\nif rn == '':\n    rn = None\nThis ensures compatibility with workflows that lack row or column factors.\nWe can then produce our plot:\ng = sns.FacetGrid(df_plot, col=cn, row=rn)\ng.map(sns.scatterplot, \".x\", \".y\")\ng.set_axis_labels(x_var=\"X axis\", y_var=\"Y axis\")",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Patterns for Plot Operators</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/1-patterns-plots.html#saving-and-exporting-plots",
    "href": "04-advanced-topics/1-patterns-plots.html#saving-and-exporting-plots",
    "title": "19  Patterns for Plot Operators",
    "section": "19.5 Saving and Exporting Plots",
    "text": "19.5 Saving and Exporting Plots\nFinally, you can save the plot as an image and upload it back to Tercen:\nfrom tempfile import NamedTemporaryFile\nfrom tercen.util.helper_functions import image_file_to_df, as_relation, as_join_operator\n\ntmp = NamedTemporaryFile(delete=True, suffix='.png')\ng.savefig(tmp)\n\ndf_out = image_file_to_df(tmp.name)\nrel_out = as_relation(df_out)\ncontext.save_relation(as_join_operator(rel_out, [], []))\nThis pattern uses helper functions to convert the plot into a Tercen-compatible format and save it as a relation.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Patterns for Plot Operators</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/1-patterns-plots.html#conclusion",
    "href": "04-advanced-topics/1-patterns-plots.html#conclusion",
    "title": "19  Patterns for Plot Operators",
    "section": "19.6 Conclusion",
    "text": "19.6 Conclusion\nThese development patterns allow you to:\n\nRetrieve and process data efficiently.\nCreate dynamic, customizable plots.\nLeverage Tercen metadata for advanced visualizations.\nSave and integrate results seamlessly back into Tercen workflows.\n\nBy mastering these techniques, you can build powerful, reusable visualization operators for collaborative data analysis in Tercen.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Patterns for Plot Operators</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/2-tercen-cli.html",
    "href": "04-advanced-topics/2-tercen-cli.html",
    "title": "20  Running Tercen from the CLI",
    "section": "",
    "text": "20.1 Prerequisites\nThis chapter provides an overview of workflows automation in Tercen using Python and the API. The script uses the Tercen Python client to interact with a local Tercen instance, create a temporary project, import a Git repository, and trigger workflow computations using predefined data.\nTo use the workflow runner script, ensure the following:",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Running Tercen from the CLI</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/2-tercen-cli.html#prerequisites",
    "href": "04-advanced-topics/2-tercen-cli.html#prerequisites",
    "title": "20  Running Tercen from the CLI",
    "section": "",
    "text": "A local instance of Tercen is running (e.g., via Tercen Studio).\nThe Tercen Python client is installed (tercen package).\nA GitHub token is available as an environment variable (GITHUB_TOKEN) for repository access, if needed.\n\n\n20.1.1 Required Python Libraries\nimport sys\nimport string\nimport random\nimport os\nimport uuid\nfrom tercen.client import context as ctx\nfrom tercen.client.factory import TercenClient\nfrom tercen.model.impl import Project, GitProjectTask, InitState, TableStep, TableStepModel, SimpleRelation, StepState, DoneState, RunWorkflowTask, Pair\n\n\n20.1.2 Configuration Variables\nThe script uses the following configuration variables:\nuser = \"workflow_runner\"\npassw = \"workflow_runner\"\nservice_uri = \"http://tercen:5400\"\ntemplate_repo = \"https://github.com/tercen/dose_response_template\"\nbranch = \"main\"\ntag = \"\"\ngit_token = os.environ.get(\"GITHUB_TOKEN\", \"\")\ntemplate_folder = \"workflow_tests\"\n\nuser and passw: Credentials for authenticating with the Tercen instance.\nservice_uri: URL of the local Tercen instance.\ntemplate_repo: GitHub repository containing the workflow template.\nbranch: Git branch to use (e.g., main).\ntag: Optional Git tag (empty by default).\ngit_token: GitHub personal access token for repository access.\ntemplate_folder: Folder for workflow tests.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Running Tercen from the CLI</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/2-tercen-cli.html#script-workflow",
    "href": "04-advanced-topics/2-tercen-cli.html#script-workflow",
    "title": "20  Running Tercen from the CLI",
    "section": "20.2 Script Workflow",
    "text": "20.2 Script Workflow\nThe script performs the following steps:\n\n20.2.1 1. Initialize the Tercen Client\nThe script initializes a connection to the Tercen instance using the provided credentials.\nclient = TercenClient(\"http://tercen:5400\")\nclient.userService.connect(user, passw)\n\n\n20.2.2 2. Create a Temporary Project\nA temporary project is created with a randomly generated name to serve as the workspace for the workflow.\nproject = Project()\nproject.name = 'WorkflowRunner_' + ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))\nproject.acl.owner = user\nproject = client.projectService.create(project)\nThe project name is prefixed with WorkflowRunner_ followed by a four-character random string.\n\n\n20.2.3 3. Import a Git Repository\nThe script sets up and triggers a GitProjectTask to clone the specified repository into the project.\nimport_task = GitProjectTask()\nimport_task.owner = user\nimport_task.state = InitState()\n\nimport_task.addMeta(\"PROJECT_ID\", project.id)\nimport_task.addMeta(\"PROJECT_REV\", project.rev)\nimport_task.addMeta(\"GIT_ACTION\", \"reset/pull\")\nimport_task.addMeta(\"GIT_PAT\", git_token)\nimport_task.addMeta(\"GIT_URL\", template_repo)\nimport_task.addMeta(\"GIT_BRANCH\", branch)\nimport_task.addMeta(\"GIT_MESSAGE\", \"\")\nif tag:\n    import_task.addMeta(\"GIT_TAG\", tag)\n\nimport_task = client.taskService.create(import_task)\nclient.taskService.runTask(import_task.id)\nimportTask = client.taskService.waitDone(import_task.id)\nKey metadata includes the project ID, Git URL, branch, and authentication token. The task clones the dose_response_template repository and waits for completion.\n\n\n20.2.4 4. Trigger Workflow Computation\nThe script retrieves a predefined workflow, table step, and dataset using hardcoded IDs, then triggers a computation.\nproject = client.projectService.get(\"9c44bf7ae873f33e0171dea4fd012375\")\nworkflow_id = \"9c44bf7ae873f33e0171dea4fd016344\"\nstep_id = \"1e0b619b-b8fa-43c3-aef8-6e0f5d8f80f8\"\nrelation_id = \"9c44bf7ae873f33e0171dea4fd015d70\"\nworkflow = client.workflowService.get(workflow_id)\ntable_step = next((step for step in workflow.steps if step.id == step_id), None)\nif not table_step:\n    raise ValueError(f\"No table step found with ID {step_id}\")\nThe script configures the table step with a SimpleRelation and marks it as complete.\ntable_step_model = TableStepModel()\nsimple_rel = SimpleRelation()\nsimple_rel.id = relation_id\ntable_step_model.relation = simple_rel\ntable_step.model = table_step_model\n\nstep_state = StepState()\nstep_state.taskState = DoneState()\ntable_step.state = step_state\n\nclient.workflowService.update(workflow)\nA RunWorkflowTask is then created and executed to run the workflow computation.\nrunTask = RunWorkflowTask()\nrunTask.state = InitState()\nrunTask.workflowId = workflow.id\nrunTask.workflowRev = workflow.rev\nrunTask.owner = project.acl.owner\nrunTask.projectId = project.id\n\nrunTask = client.taskService.create(obj=runTask)\nclient.taskService.runTask(taskId=runTask.id)\nrunTask = client.taskService.waitDone(taskId=runTask.id)\n\nclient.workflowService.update(workflow)\n\n\n20.2.5 5. Next Steps\nThe script includes suggestions for further exploration:\n\nReview the workflow runner’s capabilities.\nExplore the Tercen Python client unit tests for additional API usage examples.\nInvestigate GitHub Actions for integrating the workflow runner into a CI/CD pipeline.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Running Tercen from the CLI</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/2-tercen-cli.html#available-tasks",
    "href": "04-advanced-topics/2-tercen-cli.html#available-tasks",
    "title": "20  Running Tercen from the CLI",
    "section": "20.3 Available Tasks",
    "text": "20.3 Available Tasks\nThe Tercen platform supports various tasks for workflow and project management, including:\n\nCreateGitOperatorTask\nTestOperatorTask\nExportTableTask\nExportWorkflowTask\nImportWorkflowTask\nImportGitWorkflowTask\nImportGitDatasetTask\nRunWebAppTask\nCSVTask\nCubeQueryTask\nRunWorkflowTask\nRunComputationTask\nComputationTask\nSaveComputationResultTask\nGlTask\nGitProjectTask\nLibraryTask",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Running Tercen from the CLI</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/2-tercen-cli.html#useful-resources",
    "href": "04-advanced-topics/2-tercen-cli.html#useful-resources",
    "title": "20  Running Tercen from the CLI",
    "section": "20.4 Useful Resources",
    "text": "20.4 Useful Resources\n\nTercen Python Client: https://github.com/tercen/tercen_python_client – Check unit tests for API usage examples.\nTercen Workflow Runner: https://github.com/tercen/workflow_runner_operator\nTercen Developers Guide: https://tercen.github.io/developers_guide/\nDose-Response Curve Fit Template: https://github.com/tercen/dose_response_template",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Running Tercen from the CLI</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/2-tercen-cli.html#notes",
    "href": "04-advanced-topics/2-tercen-cli.html#notes",
    "title": "20  Running Tercen from the CLI",
    "section": "20.5 Notes",
    "text": "20.5 Notes\n\nThe script assumes a local Tercen instance is running. For CI/CD integration, refer to Tercen GitHub Actions for starting a local instance.\nHardcoded IDs (e.g., workflow_id, step_id) are used for demonstration. In production, these should be dynamically retrieved or passed as parameters.\nEnsure the GitHub token has appropriate permissions to access the target repository.\n\nThis script serves as a foundation for automating Tercen workflows and can be extended for more complex use cases, such as parameterized workflow execution or integration with external systems.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Running Tercen from the CLI</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/3-gpu-development.html",
    "href": "04-advanced-topics/3-gpu-development.html",
    "title": "21  GPU Development in Tercen Studio",
    "section": "",
    "text": "21.1 Setup Instructions\nGPU support is now available in Tercen Studio. Follow the steps below to enable and test GPU access in your local setup.\nOnce the containers are up, you can access the GPU from Code Server.",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>GPU Development in Tercen Studio</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/3-gpu-development.html#setup-instructions",
    "href": "04-advanced-topics/3-gpu-development.html#setup-instructions",
    "title": "21  GPU Development in Tercen Studio",
    "section": "",
    "text": "Pull the latest version of the Tercen Studio repository:\nhttps://github.com/tercen/tercen_studio\nConfigure Docker for GPU support. Modify the docker-compose.yaml file as described below:\n\nComment out the default runtime-docker image.\n\n#image: docker:24.0.6-dind-alpine3.18\n\nUncomment GPU-related configuration.\n\nUnder the dind service:\nimage: tercen/nvidia-dind:12.1.0-runtime-ubuntu22.04\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - driver: nvidia\n          count: 1\n          capabilities: [ gpu ]\nUnder the VS Code service code-server:\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - driver: nvidia\n          count: 1\n          capabilities: [ gpu ]",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>GPU Development in Tercen Studio</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/3-gpu-development.html#changes-to-operators",
    "href": "04-advanced-topics/3-gpu-development.html#changes-to-operators",
    "title": "21  GPU Development in Tercen Studio",
    "section": "21.2 Changes to operators",
    "text": "21.2 Changes to operators\n\nThe Dockerfile uses a GPU-enabled runtime:\n\nFROM tercen/runtime-tf:2.17.0-gpu\n\nThe operator.json declares GPU capability:\n\n\"capabilities\": [\"gpu\"]",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>GPU Development in Tercen Studio</span>"
    ]
  },
  {
    "objectID": "04-advanced-topics/3-gpu-development.html#verifying-gpu-access",
    "href": "04-advanced-topics/3-gpu-development.html#verifying-gpu-access",
    "title": "21  GPU Development in Tercen Studio",
    "section": "21.3 Verifying GPU Access",
    "text": "21.3 Verifying GPU Access\nOnce inside the container, verify GPU access using TensorFlow or PyTorch.\n\n21.3.1 TensorFlow\nimport tensorflow as tf\nprint(\"Num GPUs Available:\", len(tf.config.list_physical_devices('GPU')))\n\n\n21.3.2 PyTorch\nimport torch\nprint(\"Is CUDA available:\", torch.cuda.is_available())\nIf GPU is not detected, you might need to install some drivers and dependencies on your machine. Please refer to Docker’s GPU support documentation:\nhttps://docs.docker.com/desktop/features/gpu/",
    "crumbs": [
      "Advanced Topics",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>GPU Development in Tercen Studio</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/1-common-issues.html",
    "href": "05-troubleshooting/1-common-issues.html",
    "title": "22  Common development issues",
    "section": "",
    "text": "22.1 Where can I find my Tercen token?\nYou can find your Tercen token by logging into your instance and navigating to:\nhttps://YOUR_INSTANCE_URL/_token\nFor example: - If you work on tercen.com, go to: https://tercen.com/_token - If you work on a custom instance, replace YOUR_INSTANCE_URL with your actual domain\nThe token will be displayed on this page and can be copied for use in your development environment.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Common development issues</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/1-common-issues.html#failed-to-decode",
    "href": "05-troubleshooting/1-common-issues.html#failed-to-decode",
    "title": "22  Common development issues",
    "section": "22.2 Failed to decode",
    "text": "22.2 Failed to decode\ntercen.http.HttpClientService.TercenError: unknown : failed to decode\nWhen running the TercenContext() function in Python (or tercenCtx() in R), this error happens when it is not possible to retrieve data from the specified data step. Common underlying reasons include: * Data Step has not been saved * Data Step is already run\nIn order to fix the issue: * Reset the data step, * Save - Refresh - Save the data step, * Re-run the TercenContext call.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Common development issues</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html",
    "href": "05-troubleshooting/2-ci.html",
    "title": "23  CI and Github Actions",
    "section": "",
    "text": "23.1 Test not found\noperator.run.test.not.found\nThis error happens when none of the test, tests or workflow_tests have been found at the repository root.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html#wrong-relations",
    "href": "05-troubleshooting/2-ci.html#wrong-relations",
    "title": "23  CI and Github Actions",
    "section": "23.2 Wrong relations",
    "text": "23.2 Wrong relations\ntask.test.operator.bad.nRelations\nThis error happens when there are not as many tables (relations) between the computed and expected outputs.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html#wrong-ncols-nrows",
    "href": "05-troubleshooting/2-ci.html#wrong-ncols-nrows",
    "title": "23  CI and Github Actions",
    "section": "23.3 Wrong nCols / nRows",
    "text": "23.3 Wrong nCols / nRows\ntask.test.operator.bad.nCols task.test.operator.bad.nRows\nThis error happens when there are not as many columns or rows between the computed and expected output relations.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html#wrong-column-names",
    "href": "05-troubleshooting/2-ci.html#wrong-column-names",
    "title": "23  CI and Github Actions",
    "section": "23.4 Wrong column names",
    "text": "23.4 Wrong column names\ntask.test.operator.bad.column.names\nThis error happens when the computed and expected output relations do not have the exact same column names.\nMaybe you’ve added or renamed a column in the latest version of the operator? In that case, the reference table should be updated accordingly.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html#wrong-column-type",
    "href": "05-troubleshooting/2-ci.html#wrong-column-type",
    "title": "23  CI and Github Actions",
    "section": "23.5 Wrong column type",
    "text": "23.5 Wrong column type\ntask.test.operator.bad.column.type\n\nCheck that .ri and .ci factors are output as integers in your operators.\nIf another factor (for example, a cluster ID), tercen test will expect is to be a double. In that case, you need to provide a schema file. If you use tim to genenerate your test, you can use the XXX argument to the build_test_data function.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html#wrong-values",
    "href": "05-troubleshooting/2-ci.html#wrong-values",
    "title": "23  CI and Github Actions",
    "section": "23.6 Wrong values",
    "text": "23.6 Wrong values\ntask.test.operator.bad.value\nThis error occurs when a value is different between the reference table and the computed table. It gives you the row number and both values to help finding the issue.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html#wrong-correlation",
    "href": "05-troubleshooting/2-ci.html#wrong-correlation",
    "title": "23  CI and Github Actions",
    "section": "23.7 Wrong correlation",
    "text": "23.7 Wrong correlation\ntask.test.operator.bad.correlation\nThis error occurs when the correlation between the reference table and the computed table values is not high enough.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "05-troubleshooting/2-ci.html#untrusted-git",
    "href": "05-troubleshooting/2-ci.html#untrusted-git",
    "title": "23  CI and Github Actions",
    "section": "23.8 Untrusted git",
    "text": "23.8 Untrusted git\ntercen.forbidden.untrusted.git\nThis error occurs when you try to install an operator from an untrusted GitHub organisation. The organisation in which you develop your operator should be added to your Tercen instance configuration file.",
    "crumbs": [
      "Troubleshooting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CI and Github Actions</span>"
    ]
  },
  {
    "objectID": "99-appendices/1-glossary.html",
    "href": "99-appendices/1-glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "App: A small workflow composed of steps, visuals and operators. Typically it achieves one task, e.g. PCA app. The PCA app is composed of one result visual and one computation and one data wrangling step.\nCross-tab view: A Tercen interface window to define a projection view (i.e. what is on the: row, col, y-axis, x-axis, color, label).\nLibrary: A repository of Tercen modules.\nLong format: A format where every row is a measurement.\nMeasurement: A numerical variable\nModule: A plug-in to Tercen. It can be an operator, app, or template.\nObservation: An observation is the factor name given to a value (measurement), at a particular moment in time, of a particular variable.\nOperator: An operator computes on data supplied to it by the projection view defined using the cross-tab window.\nProjection: A projection is defined using the cross-tab window.\nStep: A single step allows for a visual projection and optionally a computation using an operator.\nTemplate: A templatised workflow.\nVariable: A variable is a characteristic of a unit being observed that may assume more than one of a set of values to which a numerical measure or a category from a classification can be assigned (e.g. income, age, weight, etc., and “occupation”, “industry”, “disease”, etc.\nWide format: A format where every column is a variable.\nWorkflow: A sequence of steps or apps to achieve an analysis pipeline.",
    "crumbs": [
      "Appendices",
      "Glossary"
    ]
  },
  {
    "objectID": "99-appendices/2-organisation-setup.html",
    "href": "99-appendices/2-organisation-setup.html",
    "title": "Organisation setup",
    "section": "",
    "text": "Choose a Tercen instance to run unit tests\nIf you wish to develop your own Tercen modules, an initial setup is required",
    "crumbs": [
      "Appendices",
      "Organisation setup"
    ]
  },
  {
    "objectID": "99-appendices/2-organisation-setup.html#choose-a-tercen-instance-to-run-unit-tests",
    "href": "99-appendices/2-organisation-setup.html#choose-a-tercen-instance-to-run-unit-tests",
    "title": "Organisation setup",
    "section": "",
    "text": "Regression testing is used for the development process of Tercen modules.\nThose tests consist in Tercen workflows that can be run on a Tercen instance. This instance needs to be specified and a Tercen “test user” needs to be created. This user will be used to run the tests from the GitHub Action.\nChoose an instance that will be used to run the test. It could be your development instance for example. You will need to use the service URI (e.g. https://tercen.com) in the next step.\nCreate a test user. You will need its name and password in the next step.",
    "crumbs": [
      "Appendices",
      "Organisation setup"
    ]
  },
  {
    "objectID": "99-appendices/2-organisation-setup.html#set-up-your-github-organisation",
    "href": "99-appendices/2-organisation-setup.html#set-up-your-github-organisation",
    "title": "Organisation setup",
    "section": "Set up your GitHub organisation",
    "text": "Set up your GitHub organisation\n\nWe assume you already have a GitHub organisation in place\nYou need to add the GH secrets\n\nTERCEN_TEST_USERNAME and TERCEN_TEST_PASSWORD\nTERCEN_TEST_URI\nGITHUB_PAT\n\nTemplate and GH Actions\n\nCreate a template GitHub repository on your own organisation, based on the Tercen one\nEdit the GitHub workflow files to replace the secrets by your own organisation secrets you just set up",
    "crumbs": [
      "Appendices",
      "Organisation setup"
    ]
  },
  {
    "objectID": "99-appendices/2-organisation-setup.html#tercen-instance-configuration",
    "href": "99-appendices/2-organisation-setup.html#tercen-instance-configuration",
    "title": "Organisation setup",
    "section": "Tercen instance configuration",
    "text": "Tercen instance configuration\nIf you are using your own Tercen instance, you need to modify the Tercen config file and add your GitHub organisation to the “trusted git” list.\ntercen.allow.untrusted.git: 'false'\ntercen.allow.untrusted.docker: 'false'\ntercen.trusted.git:\n  - 'https://github.com/tercen/'\n  - 'https://github.com/YOUR_GITHUB_ORGANISATION/'",
    "crumbs": [
      "Appendices",
      "Organisation setup"
    ]
  },
  {
    "objectID": "99-appendices/2-organisation-setup.html#github-token-configuration",
    "href": "99-appendices/2-organisation-setup.html#github-token-configuration",
    "title": "Organisation setup",
    "section": "GitHub Token Configuration",
    "text": "GitHub Token Configuration\nConfigure the GitHub token with the required scopes for accessing the GitHub Docker registry and managing packages:\n\nSetting tercen.github.token\nThe GitHub token requires specific scopes to function properly with Tercen operator development:\n\n\n\n\n\n\nRequired GitHub Token Scopes\n\n\n\nWhen creating your GitHub Personal Access Token, ensure it includes these scopes: - repo: Full control of private repositories - packages:read: Read packages from GitHub Docker registry - packages:write: Write packages to GitHub Docker registry (if publishing) - workflow: Update GitHub Action workflows\n\n\n# Add to your Tercen configuration\ntercen.github.token: 'ghp_your_github_personal_access_token_here'\nSteps to create the token:\n\nGo to GitHub Settings → Developer settings → Personal access tokens\nClick “Generate new token (classic)”\nSelect the required scopes listed above\nCopy the generated token and add it to your Tercen configuration\n\n\n\nSetting tercen.library.urls\nConfigure library URLs if you want to manage the Main Library of your local Tercen instance:\n# Configure library management URLs\ntercen.library.urls:\n  - 'https://your-library-server.com/api'\nThis configuration allows you to: - Manage operator libraries on your local instance - Control which operators are available to users - Maintain custom operator repositories",
    "crumbs": [
      "Appendices",
      "Organisation setup"
    ]
  },
  {
    "objectID": "99-appendices/3-tercen-studio.html",
    "href": "99-appendices/3-tercen-studio.html",
    "title": "Setting up Tercen Studio",
    "section": "",
    "text": "Installing Tercen Studio\nIf you wish to develop operators then you need to set up a development environment.\n1. Install docker-compose\nFirst you need to install docker-compose.\nFor Windows:\nIf you use Windows, you can install Docker-Desktop for Windows that includes docker-compose.\nAdvise: Select the WSL 2 backend system option when installing on Windows.\nFor Mac and Linux:\nCheck out how to install docker-compose on Mac or Linux.\n2. Clone tercen-studio repository\nThen, get tercen-studio by cloning the following repository:\nYou then need to create the tercen network by running the following command.\nThe latest instructions on how to install Tercen Studio can be found in the README of the Tercen Studio GitHub repository.",
    "crumbs": [
      "Appendices",
      "Setting up Tercen Studio"
    ]
  },
  {
    "objectID": "99-appendices/3-tercen-studio.html#installing-tercen-studio",
    "href": "99-appendices/3-tercen-studio.html#installing-tercen-studio",
    "title": "Setting up Tercen Studio",
    "section": "",
    "text": "git clone https://github.com/tercen/tercen_studio.git\ncd tercen_studio\n\ndocker network create tercen",
    "crumbs": [
      "Appendices",
      "Setting up Tercen Studio"
    ]
  },
  {
    "objectID": "99-appendices/3-tercen-studio.html#starting-tercen-studio",
    "href": "99-appendices/3-tercen-studio.html#starting-tercen-studio",
    "title": "Setting up Tercen Studio",
    "section": "Starting Tercen Studio",
    "text": "Starting Tercen Studio\nOnce docker-compose is installed and the tercen-studio repository cloned, you can start tercen by running:\ndocker-compose up -d\nYou can run Tercen by going to http://127.0.0.1:5402.\n\nUsername: admin\nPassword: admin\n\nYou can run RStudio by going to http://127.0.0.1:8787/.\n\nUsername: rstudio\nPassword: tercen\n\nYou can run VS Code by going to http://127.0.0.1:8443/.\n\nPassword: tercen\n\nNow you’re all set!",
    "crumbs": [
      "Appendices",
      "Setting up Tercen Studio"
    ]
  }
]