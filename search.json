[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"guide outlines design, develop share modules Tercen.Tercen promotes collaboration data analysis. everyone can code even\nwants , everyone benefit explosion data code\ncurrently taking place.Tercen allows non programmers (e.g. biologists) explore data \nprogrammers (e.g. bioinformaticians) upload code (web-apps)\nbiologist use. offering services believe biologist get\nempowered can claim back control data. bioinformatician gets\nliberated operational details day day analysis demands \nbiologist. summed phrase:Tercen empowers biologist liberates bioinformatician.","code":""},{"path":"guidelines.html","id":"guidelines","chapter":"1 Guidelines","heading":"1 Guidelines","text":"want developers great experience building Tercen Platform.\nbelieve building vibrant developer ecosystem around Tercen benefits\neveryone involved, helps mission make data analysis accessible \nwider community.’ve written guidelines anyone using Tercen’s products services,\nshow use Tercen APIs, share best practices ,\n, continue build new exciting products services., like everything life, rules engagement \n’ve drawn developer guidelines. Yes, ’re written legal\nterms, protect us , ’ve tried ensure simple \npossible. want point towards opportunities rather focusing \ncan’t done.guidelines sit alongside, addition \nTerms Service \nPrivacy Policy \nplease make sure ’ve read understand documents. feel \nmisusing products services, reserve right withdraw access\nproducts services entirely.","code":""},{"path":"guidelines.html","id":"legal-text","chapter":"1 Guidelines","heading":"Legal text","text":"starting work, ’ll ask confirm ’re happy comply \nspirit letter guidelines.Please use Tercen’s products services responsibly. products, services\nbrand really important us, ask anything\nmight damage .expect data produced Tercen’s products represented transparently\nhonestly. Don’t misrepresent data metrics created products.\nexpect use products services help serve customers.\nDon’t re-sell, re-purpose license, data obtained Tercen. Don’t use\nproducts create service competes Tercen infringes \ncopyright. Keeping customers’ data secure important thing \nTercen . Don’t use spiders, robots crawlers, data mining similar tools\nscrape Tercen Website APIs.Tercen needs access monitor access API don’t block us \n. Respect rate-limits. Don’t overuse APIs resources – \nexpect comply fair usage guidelines publish time time.\nidea products can improved like\ntry something experimental please let us know ’d happy \ndiscuss .can use logo branding right , please\ndon’t anything damage brand integrity misleading \nconfusing customers - includes using logo part logo,\nusing Tercen name app name anything else considered\nabuse branding, logos copyrighted materials.Treat customers data responsibly.\nKeeping customers’ data secure important thing Tercen .\ngo considerable lengths ensure data sent Tercen \nhandled securely.expect others access customers’ data treat \nlevel trust responsibility.terms developers include:must appropriate measures place protect information \nreceive Tercen unauthorized access, use, disclosure.must use data need build product service.must end user agreement privacy policy place respect\ncustomers - must compatible Tercen’s terms.must ensure ’re meeting legal obligations terms \napplicable data protection consumer protection; don’t use Tercen’s products\nconnection data don’t permission process.must able meet requirements European Union’s General Data\nProtection Regulation (GDPR) data process falls within \nscope legislation fulfill subject access requests required. \naddition breach notifications required GDPR, ’ll notify Tercen \npersonal data breaches within 72 hours becoming aware breach.must grant Tercen permission audit data processing activities.\ncan include independently produced audit reports.developer platform business evolves, guidelines.\n’d love get touch ’ve feedback suggestions \ncan make better.know occasionally things can go wrong mistakes can made. \ntime concerned guidelines may breached, please\nnotify us soon become aware. guidelines may change time,\ncome back check periodically.Thanks reading far - ’re excited see ’ll build!","code":""},{"path":"core-concepts.html","id":"core-concepts","chapter":"2 Core concepts","heading":"2 Core concepts","text":"","code":""},{"path":"core-concepts.html","id":"tercen-modules","chapter":"2 Core concepts","heading":"Tercen modules","text":"three main types Tercen modules:TemplatesAppsOperatorsA researcher wanting complete workflow data analysis (e.g. RNA-seq, flow cyto,\netc.) chooses one workflows expressed list template. \ntemplate therefore represents highest level app defines \nset many steps sequence achieve complete analysis. \ntemplate high-level workflow (e.g. RNA-seq, flow cyto, etc.).researcher wanting specific statistical process (e.g. quality control, two\ngroup analysis, enrichment analysis, etc.) chooses list apps.\napp therefore represents second highest level app defines \nfocused set steps visuals achieve one particular statistical objective.researcher wanting specific operator function (e.g. scale, log, multiplication,\naddition subtraction, etc.) chooses list operators.\noperator therefore represents single computational step. \ntypically single R Python function.summary researcher wishing full end--end workflow chooses template,\nspecific data process chooses workflow, specific computation chooses\noperator.module built, may added Library can \naccessed researchers.Deciding build determined like module achieve.\nfirst two, template workflow, need programming experience,\noperator .building type module explained following chapters.","code":""},{"path":"setting-up-tercen-studio.html","id":"setting-up-tercen-studio","chapter":"3 Setting up Tercen Studio","heading":"3 Setting up Tercen Studio","text":"wish develop operators need set development environment.","code":""},{"path":"setting-up-tercen-studio.html","id":"installing-tercen-studio","chapter":"3 Setting up Tercen Studio","heading":"Installing Tercen Studio","text":"1. Install docker-composeFirst need install docker-compose.Windows:use Windows, can install Docker-Desktop Windows includes docker-compose.Advise: Select WSL 2 backend system option installing Windows.Mac Linux:Check install docker-compose Mac Linux.2. Clone tercen-studio repositoryThen, get tercen-studio cloning following repository:need create tercen network running following command.latest instructions install Tercen Studio can found \nREADME Tercen Studio GitHub repository.","code":"git clone https://github.com/tercen/tercen_studio.git\ncd tercen_studiodocker network create tercen"},{"path":"setting-up-tercen-studio.html","id":"starting-tercen-studio","chapter":"3 Setting up Tercen Studio","heading":"Starting Tercen Studio","text":"docker-compose installed tercen-studio repository cloned, can start tercen running:can run Tercen going http://127.0.0.1:5402.Username: adminUsername: adminPassword: adminPassword: adminYou can run RStudio going http://127.0.0.1:8787/.Username: rstudioUsername: rstudioPassword: tercenPassword: tercenYou can run VS Code going http://127.0.0.1:8443/.Password: tercenNow ’re set!","code":"docker-compose up -d"},{"path":"general-workflow.html","id":"general-workflow","chapter":"4 General workflow","heading":"4 General workflow","text":"Lets go general approach create R operator Tercen.\ndetailed walk (tutorial) example outlined next\nchapter linear regression operator built scratch.Building operator requires following sequential steps:Design operatorSetup github repositorySetup input projectionConnecting TercenTestingManaging input parametersManaging R packagesDeploy","code":""},{"path":"general-workflow.html","id":"design-the-operator","chapter":"4 General workflow","heading":"Design the operator","text":"first step define input projection output relation.\nTercen, operator shall take input table return table. Remember:“Table , table !”understand input table output table. input table defined\ndata input projection Tercen output table computed\noperator. output table (also called computed table) \nrelated input table output relation.input project projection data step used \noperator. example projection composed y-axis, x-axis,\nrow, col, color, label. input project determines \nstructure data given operator. operator computes\nsimple mean use y-axis, row, col projection. allows\nmean computed per cell. linear regression operator like lm might\nuse projection y-axis, x-axis, row, col. allows lm\ncomputed per cell.output relation relation calculated output \ninput values. example:relation per Cell?relation per Column?relation per Row?relation data?Per Cell example : Let’s say operator used projection row col operator calculates mean computed cell (.e. per row/col), per cell relationship.Per Column example: Let’s say operator used project row col operator performed clustering columns, column relationship.data example: Let’s say operator used project row col operator calculated total mean data (.e. across rows cols), data relationship.Steps designing operatorUnderstand Tercen conceptsLook existing operatorsDecide variables needed input projectionDecide values need computed output relations created","code":""},{"path":"general-workflow.html","id":"set-up-a-github-project","chapter":"4 General workflow","heading":"Set up a GitHub project","text":"operators currently developed GitHub. required \nGitHub account develop operator, operator implemented \nGitHub repository.order get started, easiest way use one GitHub repository\ntemplates prepared:minimal template R operatorstemplate R operatorstemplate Shiny operatorstemplate Docker operatorstemplate Python operatorsSteps starting operator repositoryGet GitHub accountChoose operator nameCreate operator repository GitHub based template (see )Clone repo local RStudio contained Tercen Studio","code":""},{"path":"general-workflow.html","id":"setup-the-input-data","chapter":"4 General workflow","heading":"Setup the input data","text":"can done local environment cloud instance Tercen.Login Tercen (either local cloud)Prepare data defining cross-tab projection using data step.Note project data step URL pattern: /w/workflowId/ds/stepId, workflowId stepId unique workflow data step identifiers, respectively. identifiers used next step get data data step.","code":""},{"path":"general-workflow.html","id":"connecting-to-tercen","chapter":"4 General workflow","heading":"Connecting to tercen","text":"cloned github operator project local RStudio \nsetup Tercen data projection, can code test operator locally.wish test local version Tercen, require\nset tercen.service system variable.Load data local instance TercenEach data step uniqueworkflowId stepId combination.Connecting Tercen cloudAdditional system variable required order connect data step \nTercen cloud.uuuu username pppp password, specific\nusername password.","code":"options(\"tercen.workflowId\"= \"8a8845f6a5eeff27ce33fd382444de88\")\noptions(\"tercen.stepId\"= \"5191724b-3963-4e34-af58-7977cc61e5b1\")options(\"tercen.serviceUri\"= \"https://tercen.com/api/v1/\")\noptions(\"tercen.username\"= \"uuuu\")\noptions(\"tercen.password\"= \"pppp\")"},{"path":"general-workflow.html","id":"managing-input-parameters","chapter":"4 General workflow","heading":"Managing input parameters","text":"operator file called operator.json define parameters \nuser can set using operator.deploying, please think parameters required modify file.","code":""},{"path":"general-workflow.html","id":"managing-r-packages","chapter":"4 General workflow","heading":"Managing R packages","text":"newly created operators requires correct packages loaded.\nInstall packages require using standard install procedures, \nrecommend following:install.packages()remotes::install_github()Just deploy operator, necessary setup package\nmanagement system. Tercen operator manages packages using renv system.\nrenv system allows packages required recorded\nrenv.lock file.generate use:done push repository github.","code":"renv::init() "},{"path":"general-workflow.html","id":"deploy","chapter":"4 General workflow","heading":"Deploy!","text":"satisfied operator, can release .Document operatorEdit README.md describe operator design usage. documentation contain:general description operatorA general description operatorA description input projectionsA description input projectionsA description output relationsA description output relationsPrepare operator testingIt’s always good prepare unit tests ran new version Tercen released.include test, need create tests subdirectory project directory. must include:test input filea test input filean expected output filean expected output filea JSON file containing information testa JSON file containing information testInitiate package version controlThe ability run operator exactly packages used developed essential reproducible science. order ensure reproducibility, can associate packages versions operator initiating project-local environment private libraries subdirectory.Push GitHub repositoryOnce everything ready, simply need push modifications GitHub repository created .possible secure authentication required GitHub\npush changes first time. One solution get personal access token\n(PAT) GitHub https://github.com/settings/tokens.\ncan click Generate new token, name select repo scope. \nmindful expiration setting well., can copy token paste RStudio running following\ncommand R console:Note credentials package installed default Tercen Studio.good introduction Git RStudio happygitwithr.Install operatorIf want install directly Tercen, need \ncreate release GitHub. operators version controlled.operators git repository installable,\ngit URL tag version number required researcher \ninstall Tercen.","code":"credentials::set_github_pat()"},{"path":"walkthrough-example-r-operator.html","id":"walkthrough-example-r-operator","chapter":"5 Walkthrough example: R operator","heading":"5 Walkthrough example: R operator","text":"learn concrete example create R operator Tercen. goal create operator performing linear regression input data returning slope intercept model.","code":""},{"path":"walkthrough-example-r-operator.html","id":"designing-the-operator","chapter":"5 Walkthrough example: R operator","heading":"Designing the operator","text":"first step define input projection output relation. Tercen, operator shall take input table return table. Remember:“Table , table !”want perform linear regression values projected y axis values projected x axis, per cell. example, output intercept slope model, per cell. operator model can seen follow:","code":""},{"path":"walkthrough-example-r-operator.html","id":"setting-up-the-project","chapter":"5 Walkthrough example: R operator","heading":"Setting up the project","text":"Make sure tercen-studio properly set Tercen RStudio run locally (respectively http://127.0.0.1:5402 http://127.0.0.1:8787/). Otherwise, please refer Chapter 2.1. Create GitHub repository templateCreate new GitHub repository account based Tercen R operator template (https://github.com/tercen/templateR_operator). Click green button Use template Tercen template repository.can create repository based template. Choose explicit name (, lm_operator).Now repository initiated GitHub account, go back RStudio Server (http://127.0.0.1:8787/). Create new project clicking File > New project > Version control > Git.asked URL repository (put newly created one) name project. Now, local project include skeleton:main.R: main operator scriptmain.R: main operator scriptworkspace.R: local testing scriptworkspace.R: local testing scriptoperator.json: operator metadataoperator.json: operator metadataREADME_template.md: operator documentation templateREADME_template.md: operator documentation templatedoc directory: includes dev_commands.md file, contains useful development command lines.doc directory: includes dev_commands.md file, contains useful development command lines.2. Set Tercen input projectionIn example, use khan dataset (available https://github.com/tercen/khan_data). First, start Tercen locally (http://127.0.0.1:5402) set pairwise projection measurement different tissues. data step interest look follow:Note data step URL includes pattern: /w/WORKF+LOWID/ds/DATASTEPID, WORKFLOWID DATASTEPID unique workflow data step identifiers, respectively. identifiers used next step within RStudio get data data step.","code":""},{"path":"walkthrough-example-r-operator.html","id":"develop-the-operator-locally","chapter":"5 Walkthrough example: R operator","heading":"Develop the operator locally","text":"Now RStudio project Tercen projection set , can code test operator locally follow:Open workspace.ROpen workspace.RReplace data step workflow IDs taken Tercen data step URL workspace.R:Replace data step workflow IDs taken Tercen data step URL workspace.R:Code operator. , implement function .lm() performs linear regression input data frame return slope intercept model.Execute code check results TercenNote recommend implement following sanity checks creating operator:check presence expected inputs (, x y axes)check presence expected inputs (, x y axes)use try() function test main function implemented (, lm())use try() function test main function implemented (, lm())","code":"\nlibrary(tercen)\nlibrary(dplyr)\n\noptions(\"tercen.workflowId\" = \"WORKFLOWID\")\noptions(\"tercen.stepId\"     = \"DATASTEPID\")\ndo.lm <- function(df) {\n  out <- data.frame(\n    .ri = df$.ri[1],\n    .ci = df$.ci[1],\n    intercept = NaN,\n    slope = NaN\n  )\n  \n  mod <- lm(.y ~ .x, data = df)\n  \n  out$intercept <- mod$coefficients[1]\n  out$slope <- mod$coefficients[2]\n  \n  return(out)\n}\n\nctx <- tercenCtx()  %>%          # Get data from the data step\n  select(.x, .y, .ri, .ci) %>%   # select variables of interest\n  group_by(.ri, .ci) %>%         # group by row and column (\"per cell\")\n  do(do.lm(.)) %>%               # do the linear model\n  ctx$addNamespace() %>%         # add namespace\n  ctx$save()                     # push results back to Tercen using the API"},{"path":"deploying-an-r-operator.html","id":"deploying-an-r-operator","chapter":"6 Deploying an R operator","heading":"6 Deploying an R operator","text":"Now working R operator Tercen, want deploy ! now document, prepare tests release linear regression operator.","code":""},{"path":"deploying-an-r-operator.html","id":"documenting-the-operator","chapter":"6 Deploying an R operator","heading":"Documenting the operator","text":"Edit README.md describe operator design usage. documentation contain:general description operatorA general description operatorA description input projectionsA description input projectionsA description output relationsA description output relationsFor example, lm operator documentation looks:DescriptionThe lm operator performs linear regression Tercen.UsageDetailsThe lm operator performs linear regression cell returns slope intercept model.","code":""},{"path":"deploying-an-r-operator.html","id":"deploy-1","chapter":"6 Deploying an R operator","heading":"Deploy!","text":"1. Copy code main.R scriptOnce confident enough operator working testing locally, can copy code main.R file.Make sure include options() calls needed local development step:2. Initiate renvThe ability run operator exactly packages used developed essential reproducible science. order ensure reproducibility, can associate packages versions operator using init() function renv package:initiate project-local environment private R library renv subdirectory.3. Push GitHub repositoryOnce everything ready, simply need push modifications GitHub repository created .want install directly Tercen, need create release GitHub.4. Notify communityCurrently, ask send email support@tercen.com containing description link operators app git repository, Tercen support manually test add app-library thus allowing others access . currently building web entry point researchers browse apps offered community.","code":"\n# The following lines shall not be included into main.R:\noptions(\"tercen.workflowId\" = \"wwww\")\noptions(\"tercen.stepId\"     = \"dddd\")\n\ngetOption(\"tercen.workflowId\")\ngetOption(\"tercen.stepId\")\nrenv::init()"},{"path":"improving-an-operator.html","id":"improving-an-operator","chapter":"7 Improving an operator","heading":"7 Improving an operator","text":"Now deployed R operator Tercen, can always improve ! chapter see catch errors, add input parameters (properties), prepare testing linear regression operator.","code":""},{"path":"improving-an-operator.html","id":"error-catching","chapter":"7 Improving an operator","heading":"Error catching","text":"1. Check presence input projectionFor lm_operator, can check x y axes set projection, return error message help user. can using try() function.2. Catch errors key processesWe can also use try() function catch potential errors key processes operator. example, can example catch error occuring running lm() function. , return coefficients model ran successfully. Otherwise, NaN returned.","code":"\nctx <- tercenCtx()\n\nif(inherits(try(ctx$select(\".x\")), 'try-error')) stop(\"x axis is missing.\")\nif(inherits(try(ctx$select(\".y\")), 'try-error')) stop(\"y axis is missing.\")\ndo.lm <- function(df) {\n  out <- data.frame(\n    .ri = df$.ri[1],\n    .ci = df$.ci[1],\n    intercept = NaN,\n    slope = NaN\n  )\n  mod <- try(lm(.y ~ .x, data = df))    # try-catch\n  if(!inherits(mod, 'try-error')) {     # get coefficients if lm ran succesfully\n    out$intercept <- mod$coefficients[1]\n    out$slope <- mod$coefficients[2]\n  }\n  return(out)\n}"},{"path":"improving-an-operator.html","id":"adding-properties","chapter":"7 Improving an operator","heading":"Adding properties","text":"Tercen operators can take input parameters (called properties). can different types (boolean, enumerated, numeric).example, let’s see add property lm_operator. add parameter decide whether omit intercept model .1. Modify operator’s JSON file add properties.property, set values different attributes:kind: property kind (BooleanProperty, DoubleProperty, EnumeratedProperty)kind: property kind (BooleanProperty, DoubleProperty, EnumeratedProperty)name: name displayed Tercenname: name displayed TercendefaultValue: default value taken propertydefaultValue: default value taken propertydescription: description displayed Tercendescription: description displayed TercenIn case, JSON file looks now like :2. Use property R codeThis property can called R operator code follows:","code":"{\n  \"name\": \"Linear regression\",\n  \"description\": \"Returns the intercept and slope of a linear regression in a cell\",\n  \"tags\": [\"linear model\"],\n  \"authors\": [\"tercen\"],\n  \"urls\": [\"https://github.com/agouy/lm_operator\"],\n  \"properties\": [\n  {\n    \"kind\": \"BooleanProperty\",\n    \"name\": \"intercept.omit\",\n    \"defaultValue\": false,\n    \"description\": \"A logical value indicating whether the intercept should be omitted in the model.\"\n  }\n  ]\n}\n  intercept.omit <- as.logical(ctx$op.value('intercept.omit'))\n  if(intercept.omit) {\n    mod <- try(lm(.y ~ .x - 1, data = df))\n  } else {\n    mod <- try(lm(.y ~ .x, data = df))\n  }"},{"path":"improving-an-operator.html","id":"preparing-operator-testing","chapter":"7 Improving an operator","heading":"Preparing operator testing","text":"’s always good prepare tests ran new version Tercen released.include test, need create test subdirectory project directory. must include:test input filea test input filean expected output filean expected output filea JSON file containing information testa JSON file containing information testFor example, test lm operator can created follow:Now input ouput files, can create JSON file shall include following information:name attribute free. Input output test files names must assigned inputDataUri inputDataUri, respectively. Variable names input file must assigned columns, rows, colors, labels, yAxis, xAxis attributes. case, colors labels left empty part input.","code":"\n# Simulate tercen input based on the CO2 dataset \n# with an x and y-axis, rows and columns\ndata(CO2)\ndf <- data.frame(.x = CO2$conc, .y = CO2$uptake, .ri = CO2$Plant, .ci = CO2$Treatment)\n\n# Run the do.lm() function created above to generate the expected output\nout <- df %>% select(.ci, .ri, .x, .y) %>%\n  group_by(.ri, .ci) %>%\n  do(do.lm(.))\n\n# write input and expected output in the test subdirectory\nwrite.csv(CO2, file=\"./test/CO2.csv\", row.names = FALSE, quote = FALSE)\nwrite.csv(out, file=\"./test/output.csv\", row.names = FALSE, quote = FALSE){\n  \"kind\": \"OperatorUnitTest\",\n  \"name\": \"testlm1\",\n  \"namespace\": \"test\",\n  \"inputDataUri\": \"CO2.csv\",\n  \"outputDataUri\": [\"output.csv\"],\n  \"columns\": [\"Treatment\"],\n  \"rows\": [\"Plant\"],\n  \"colors\": [],\n  \"labels\": [],\n  \"yAxis\": \"uptake\",\n  \"xAxis\": \"conc\"\n}"},{"path":"getting-familiar-with-tercen-studio.html","id":"getting-familiar-with-tercen-studio","chapter":"8 Getting familiar with Tercen Studio","heading":"8 Getting familiar with Tercen Studio","text":"","code":""},{"path":"getting-familiar-with-tercen-studio.html","id":"prerequisites","chapter":"8 Getting familiar with Tercen Studio","heading":"Prerequisites","text":"begin, make sure following prerequisites:Basic understanding Python programming.Familiarity Git GitHub.Tercen Studio development environment installed. Follow instructions Tercen Studio GitHub repository set environment.","code":""},{"path":"getting-familiar-with-tercen-studio.html","id":"getting-started","chapter":"8 Getting familiar with Tercen Studio","heading":"Getting started","text":"","code":""},{"path":"getting-familiar-with-tercen-studio.html","id":"step-1-set-up-a-development-data-step","chapter":"8 Getting familiar with Tercen Studio","heading":"Step 1: Set Up a Development Data Step","text":"Go Tercen local instance: http://127.0.0.1:5402/Go Tercen local instance: http://127.0.0.1:5402/Create project clicking New projectCreate project clicking New projectClick git tab create new project https://github.com/tercen/developers_guide_project follows:Click git tab create new project https://github.com/tercen/developers_guide_project follows:action populate new project contains example dataset (Crabs) small workflow get started development.action populate new project contains example dataset (Crabs) small workflow get started development.Open Dev workflow double click Dev data step open crosstab view.Open Dev workflow double click Dev data step open crosstab view.input data projection prepared purpose developing operator compute mean value y axis factor, per cell (.e., data grouped using row column factors). \nsee following projection:input data projection prepared purpose developing operator compute mean value y axis factor, per cell (.e., data grouped using row column factors). \nsee following projection:","code":""},{"path":"getting-familiar-with-tercen-studio.html","id":"step-2-set-up-environment-and-install-core-requirements","chapter":"8 Getting familiar with Tercen Studio","heading":"Step 2: Set Up Environment and Install Core Requirements","text":"Navigate VS Code: http://127.0.0.1:8443/Navigate VS Code: http://127.0.0.1:8443/open first time, might asked install VS Code extensions. Accept install Python extensions.open first time, might asked install VS Code extensions. Accept install Python extensions.Open terminal VS Code Server clicking terminal icon lower left corner. Navigate cloned repository directory using cd command. Install core requirements running following command:Open terminal VS Code Server clicking terminal icon lower left corner. Navigate cloned repository directory using cd command. Install core requirements running following command:","code":"pip3 install -r requirements.txt"},{"path":"getting-familiar-with-tercen-studio.html","id":"step-3-interact-with-data-through-the-api","chapter":"8 Getting familiar with Tercen Studio","heading":"Step 3: Interact with data through the API","text":"first thing ’ll interactively work data projected crosstab., can get data step URL workflow ID data step ID. Open main.py file\npaste following code:Execute code (Shift + Enter) Python console replaced workflow step IDs.?Now initialised Tercen context, can interact data step. Let’s start selecting data:??can check available Tables button crosstab. contains data queried. can look get inspiration. example,\ncan identify .y, .ci (column index) .ri (row index) factors queried , available.Now try run following lines code:Now can play around API check output various functions. ?description commonly used ones:select(): select factor specified argumentsas.matrix(): gets data Tercen matrix format (rows x columns, y values used fill matrix)cselect(): select column factorsrselect(): select row factorscnames: get column factor namesrnames: get row factor namescolors: get color factor nameslabels: get label factor namesaddNamespace(): add unique namespace (defined data step environment within Tercen) variable namessave(): send back output table TercenWe invite play around test different functions. mainly designed retrieve data Tercen, send back output tables. , free compute whatever need.","code":"from tercen.client import context as ctx\nimport numpy as np\n\ntercenCtx = ctx.TercenContext(\n    workflowId=\"YOUR_WORKFLOW_ID\",\n    stepId=\"YOUR_STEP_ID\",\n    username=\"admin\", # if using the local Tercen instance\n    password=\"admin\", # if using the local Tercen instance\n    serviceUri=\"http://tercen:5400/\" # if using the local Tercen instance \n)tercenCtx.select(['.y'])tercenCtx.select(['.y', '.ci', '.ri'])tercenCtx.cselect()\ntercenCtx.rselect()\ntercenCtx.colors()"},{"path":"developing-a-python-operator.html","id":"developing-a-python-operator","chapter":"9 Developing a Python Operator","heading":"9 Developing a Python Operator","text":"now see can develop simple operator Tercen. Building operator requires go following steps:Design operatorSetup github repositorySetup input projectionConnecting TercenDevelop testManage input settingsManage dependenciesDeployment","code":""},{"path":"developing-a-python-operator.html","id":"development-workflow","chapter":"9 Developing a Python Operator","heading":"Development Workflow","text":"","code":""},{"path":"developing-a-python-operator.html","id":"optional-step-1-create-a-new-git-repository","chapter":"9 Developing a Python Operator","heading":"[OPTIONAL] Step 1: Create a New Git Repository","text":"Start creating new Git repository Python operator. can use template Python operator repository starting point. can either fork repository create new one based template.","code":""},{"path":"developing-a-python-operator.html","id":"step-2-open-vs-code-server","chapter":"9 Developing a Python Operator","heading":"Step 2: Open VS Code Server","text":"Open Tercen Studio development environment access VS Code Server navigating : http://127.0.0.1:8443 web browser.","code":""},{"path":"developing-a-python-operator.html","id":"optional-step-3-clone-the-repository","chapter":"9 Developing a Python Operator","heading":"[OPTIONAL] Step 3: Clone the Repository","text":"VS Code Server, open Command Palette (Ctrl+Shift+P Cmd+Shift+P) search “Clone GitHub” command. Provide URL newly created Git repository choose location clone .able create GitHub repository, can clone template repository directly. able experiment API follow tutorial won’t able push changes install operator.","code":""},{"path":"developing-a-python-operator.html","id":"step-4-set-up-environment-and-install-core-requirements","chapter":"9 Developing a Python Operator","heading":"Step 4: Set Up Environment and Install Core Requirements","text":"Open terminal VS Code Server clicking terminal icon lower left corner. Navigate cloned repository directory using cd command. Install core requirements running following command:","code":"pip3 install -r requirements.txt"},{"path":"developing-a-python-operator.html","id":"step-5-develop-your-operator-with-a-real-life-example","chapter":"9 Developing a Python Operator","heading":"Step 5: Develop Your Operator with a Real-Life Example","text":"Start developing operator creating Python script cloned repository directory. Create new Python script, example, main.py, paste following code:Let’s break code step step understand functionality:section code imports necessary modules. tercen.client.context provides Tercen context interacting environment, numpy popular library numerical computations Python., instance TercenContext class created. context facilitates interaction Tercen environment, including data access operations.section performs series operations data:.select(['.y', '.ci', '.ri'], df_lib=\"polars\"): Selects columns ‘.y’, ‘.ci’, ‘.ri’ data. df_lib parameter set “polars,” indicating data treated Polars DataFrame..select(['.y', '.ci', '.ri'], df_lib=\"polars\"): Selects columns ‘.y’, ‘.ci’, ‘.ri’ data. df_lib parameter set “polars,” indicating data treated Polars DataFrame..groupby(['.ci', '.ri']): Groups data columns ‘.ci’ (column index) ‘.ri’ (row index)..groupby(['.ci', '.ri']): Groups data columns ‘.ci’ (column index) ‘.ri’ (row index)..mean(): Calculates mean grouped data. computes mean value group..mean(): Calculates mean grouped data. computes mean value group..rename({\".y\": \"mean\"}): Renames column named ‘.y’ “mean” reflect contains computed mean values..rename({\".y\": \"mean\"}): Renames column named ‘.y’ “mean” reflect contains computed mean values.result Polars DataFrame named df containing computed mean per cell.line adds namespace DataFrame using add_namespace. step ensures unique data step specific prefix added new factors avoid duplicate factor names workflow.Finally, computed DataFrame saved using save method TercenContext. action makes calculated mean per cell available use within Tercen environment.","code":"from tercen.client import context as ctx\nimport numpy as np\n\ntercenCtx = ctx.TercenContext()\n\n# Select relevant columns and create a pandas DataFrame\ndf = (\n    tercenCtx\n    .select(['.y', '.ci', '.ri'], df_lib=\"polars\")\n    .groupby(['.ci', '.ri'])\n    .mean()\n    .rename({\".y\": \"mean\"})\n)\n\n# Add namespace and save the computed mean per cell\ndf = tercenCtx.add_namespace(df)\ntercenCtx.save(df)from tercen.client import context as ctx\nimport numpy as nptercenCtx = ctx.TercenContext()df = (\n    tercenCtx\n    .select(['.y', '.ci', '.ri'], df_lib=\"polars\")\n    .groupby(['.ci', '.ri'])\n    .mean()\n    .rename({\".y\": \"mean\"})\n)df = tercenCtx.add_namespace(df)tercenCtx.save(df)"},{"path":"developing-a-python-operator.html","id":"step-6-generate-requirements","chapter":"9 Developing a Python Operator","heading":"Step 6: Generate Requirements","text":"operator requires additional Python packages, can generate requirements.txt file using following command:","code":"python3 -m tercen.util.requirements . > requirements.txt"},{"path":"developing-a-python-operator.html","id":"optional-step-7-push-changes-to-github","chapter":"9 Developing a Python Operator","heading":"[OPTIONAL] Step 7: Push Changes to GitHub","text":"Commit changes local Git repository push changes GitHub. trigger Continuous Integration (CI) GitHub workflow, performs automated tests operator.","code":""},{"path":"developing-a-python-operator.html","id":"optional-step-8-tag-the-repository","chapter":"9 Developing a Python Operator","heading":"[OPTIONAL] Step 8: Tag the Repository","text":"satisfied operator’s development testing, can tag repository. Tagging trigger Release GitHub workflow, create release operator.","code":""},{"path":"developing-a-python-operator.html","id":"conclusion","chapter":"9 Developing a Python Operator","heading":"Conclusion","text":"Congratulations! successfully developed deployed Python operator Tercen.\nfollowing steps, can create custom data processing operators extend functionality\nTercen streamline data analysis workflows. Remember consult Tercen documentation \ndetails advanced features. Happy coding!","code":""},{"path":"continuous-integration-workflow.html","id":"continuous-integration-workflow","chapter":"10 Continuous Integration Workflow","heading":"10 Continuous Integration Workflow","text":"","code":""},{"path":"continuous-integration-workflow.html","id":"general-idea","chapter":"10 Continuous Integration Workflow","heading":"10.1 General idea","text":"Everytime push new commit, GitHub Workflow triggered.workflow build push Docker image containing operator code execution environment .workflow specified YAML file can find /.github/workflows directory.chapter, explain section /.github/workflows/ci.yaml step--step clarify purpose functionality.","code":""},{"path":"continuous-integration-workflow.html","id":"workflow-name-and-trigger","chapter":"10 Continuous Integration Workflow","heading":"10.2 1. Workflow Name and Trigger","text":"workflow named CI Workflow, mainly identification purposes within GitHub Actions dashboard. workflow triggered push event, main branch. means every time code pushed main branch repository, workflow automatically run.","code":"name: CI Workflow\n\non:\n  push:\n    branches: ['main']"},{"path":"continuous-integration-workflow.html","id":"environment-variables","chapter":"10 Continuous Integration Workflow","heading":"10.3 2. Environment Variables","text":"Two environment variables defined :REGISTRY: set ghcr.io, stands GitHub Container Registry. domain Docker images stored.REGISTRY: set ghcr.io, stands GitHub Container Registry. domain Docker images stored.IMAGE_NAME: variable dynamically set name GitHub repository using github.repository. ${{ github.repository }} syntax GitHub’s way accessing context values, repository name.IMAGE_NAME: variable dynamically set name GitHub repository using github.repository. ${{ github.repository }} syntax GitHub’s way accessing context values, repository name.image name used later tagging Docker image.","code":"env:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}"},{"path":"continuous-integration-workflow.html","id":"job-definition-build-and-push-image","chapter":"10 Continuous Integration Workflow","heading":"10.4 3. Job Definition: build-and-push-image","text":"core workflow defined within single job called build--push-image.runs-: ubuntu-latest: job run latest available version Ubuntu. provides virtual machine necessary tools run Docker interact GitHub.runs-: ubuntu-latest: job run latest available version Ubuntu. provides virtual machine necessary tools run Docker interact GitHub.permissions: section grants specific permissions job:\ncontents: read: Allows reading repository’s contents (code, files).\npackages: write: Allows publishing Docker images GitHub Packages.\nattestations: write: Grants access manage attestations, metadata related builds.\nid-token: write: Allows job issue ID tokens authentication, commonly used OpenID Connect secure token exchanges.\npermissions: section grants specific permissions job:contents: read: Allows reading repository’s contents (code, files).packages: write: Allows publishing Docker images GitHub Packages.attestations: write: Grants access manage attestations, metadata related builds.id-token: write: Allows job issue ID tokens authentication, commonly used OpenID Connect secure token exchanges.","code":"jobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n      attestations: write\n      id-token: write"},{"path":"continuous-integration-workflow.html","id":"steps-in-the-workflow","chapter":"10 Continuous Integration Workflow","heading":"10.5 4. Steps in the Workflow","text":"job consists several steps, performing crucial task workflow.","code":""},{"path":"continuous-integration-workflow.html","id":"step-1-checkout-repository","chapter":"10 Continuous Integration Workflow","heading":"10.5.1 Step 1: Checkout Repository","text":"first step uses actions/checkout action, version v4. action checks repository code can accessed subsequent steps. Without step, job wouldn’t able access files repository.","code":"- name: Checkout repository\n  uses: actions/checkout@v4"},{"path":"continuous-integration-workflow.html","id":"step-2-log-in-to-the-container-registry","chapter":"10 Continuous Integration Workflow","heading":"10.5.2 Step 2: Log in to the Container Registry","text":"step, workflow logs GitHub’s Container Registry (ghcr.io) using docker/login-action. action allows authenticate container registry, enabling workflow push Docker images.registry: Set value ${{ env.REGISTRY }} (ghcr.io).username: Set ${{ github.actor }}, represents username person bot triggered workflow.password: Set ${{ secrets.GITHUB_TOKEN }}, built-secret provided GitHub authenticate workflow. token allows workflow access repository’s packages perform necessary actions.","code":"- name: Log in to the Container registry\n  uses: docker/login-action@v3.3.0\n  with:\n    registry: ${{ env.REGISTRY }}\n    username: ${{ github.actor }}\n    password: ${{ secrets.GITHUB_TOKEN }}"},{"path":"continuous-integration-workflow.html","id":"step-3-extract-docker-metadata-tags-and-labels","chapter":"10 Continuous Integration Workflow","heading":"10.5.3 Step 3: Extract Docker Metadata (Tags and Labels)","text":"step uses docker/metadata-action extract metadata (tags labels) repository build context. extracted metadata used later tagging Docker image.id: meta: assigns identifier meta step, making outputs accessible later steps.images: specifies base name Docker image, constructed container registry repository name.output step crucial correctly tagging labeling Docker image next step.","code":"- name: Extract metadata (tags, labels) for Docker\n  id: meta\n  uses: docker/metadata-action@v5.5.1\n  with:\n    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"},{"path":"continuous-integration-workflow.html","id":"step-4-build-and-push-docker-image","chapter":"10 Continuous Integration Workflow","heading":"10.5.4 Step 4: Build and Push Docker Image","text":"final step, docker/build-push-action used :Build Docker image using repository’s Dockerfile.Push built image GitHub Container Registry.Key parameters step:context: Set . (current directory). specifies build context, meaning files repository’s root directory used Docker build.push: Set true. ensures Docker image automatically pushed registry built.tags: tags image, provided output meta step (${{ steps.meta.outputs.tags }}).labels: Additional labels image, also provided meta step (${{ steps.meta.outputs.labels }}).","code":"- name: Build and push Docker image\n  id: push\n  uses: docker/build-push-action@v6.7.0\n  with:\n    context: .\n    push: true\n    tags: ${{ steps.meta.outputs.tags }}\n    labels: ${{ steps.meta.outputs.labels }}"},{"path":"continuous-integration-workflow.html","id":"optional-personal-access-token","chapter":"10 Continuous Integration Workflow","heading":"10.5.5 Optional: Personal Access Token","text":"optional comment explaining higher-level permissions required, Personal Access Token (PAT) used instead default GITHUB_TOKEN. defined secret (GH_PAT).","code":"# A PAT is needed for this action, GITHUB_TOKEN cannot get relevant permission \n# secrets: |\n#   github_pat=${{ secrets.GH_PAT }}"},{"path":"continuous-integration-workflow.html","id":"conclusion-1","chapter":"10 Continuous Integration Workflow","heading":"10.6 Conclusion","text":"CI pipeline builds pushes Docker images GitHub Container Registry every time changes made main branch. workflow:Checks repository.Logs container registry.Extracts metadata tag label image.Builds pushes Docker image registry.using GitHub Actions Docker together, workflow automates process containerizing code storing centralized registry, enabling future installation Tercen.","code":""},{"path":"release-workflow.html","id":"release-workflow","chapter":"11 Release Workflow","heading":"11 Release Workflow","text":"satisfied operator, can release operator following steps described .","code":""},{"path":"release-workflow.html","id":"edit-the-operator.json-file","chapter":"11 Release Workflow","heading":"11.1 1. Edit the operator.json file","text":"first edit container field operator.json file matched version number like push (, 0.0.1 example).","code":""},{"path":"release-workflow.html","id":"push-your-changes-and-tag-the-repository","chapter":"11 Release Workflow","heading":"11.2 2. Push your changes and tag the repository","text":"pushing latest commit, can add version number tag command line follows:push command:","code":"git tag 0.0.1git push --tags"},{"path":"release-workflow.html","id":"wait-and-check-the-results-of-the-release-workflow","chapter":"11 Release Workflow","heading":"11.3 3. Wait and check the results of the release workflow","text":"way workflow triggered commit, tagging repository trigger another workflow, release.yaml. workflow build push Docker image, tag run unit tests.\nworkflow run, can verify successful. case, now ready install operator Library.","code":""},{"path":"installing-an-operator.html","id":"installing-an-operator","chapter":"12 Installing an Operator","heading":"12 Installing an Operator","text":"","code":""},{"path":"installing-an-operator.html","id":"tercen-libraries","chapter":"12 Installing an Operator","heading":"12.1 Tercen Libraries","text":"Tercen allows organize manage modules (operators, templates, apps) datasets within libraries. two types libraries:Tercen Library: curated list modules datasets maintained Tercen team.Custom Libraries: Personal team-shared libraries can create manage.","code":""},{"path":"installing-an-operator.html","id":"creating-a-custom-library","chapter":"12 Installing an Operator","heading":"12.2 Creating a Custom Library","text":"install operator, first need create custom library. Tercen, library specialized type team, resources within library (operators, templates, apps) treated specialized projects. structure allows manage library’s content control access resources.Steps Create Custom Library:Create Team: Go Tercen account create new team (e.g., “MyLibrary”).Enable Library Team: Navigate team’s settings select “Library team” option designate team library.","code":""},{"path":"installing-an-operator.html","id":"installing-an-operator-in-a-custom-library","chapter":"12 Installing an Operator","heading":"12.3 Installing an Operator in a Custom Library","text":"custom library set , can use Tercen’s git integration install operators:Go library (team created).Click “New Project” choose “Git.”Fill required fields:\nName: name operator.\nURL: Git repository URL operator.\nTag: specific version tag (optional).\nAuth Token: required, provide authentication token.\nName: name operator.URL: Git repository URL operator.Tag: specific version tag (optional).Auth Token: required, provide authentication token.process clone operator’s repository custom library. now available add operator data step.","code":""},{"path":"common-patterns.html","id":"common-patterns","chapter":"13 Common patterns","heading":"13 Common patterns","text":"section outlines common development patterns encountered developing\noperators Tercen.","code":""},{"path":"common-patterns.html","id":"output-data","chapter":"13 Common patterns","heading":"13.1 Output data","text":"","code":""},{"path":"common-patterns.html","id":"one-table","chapter":"13 Common patterns","heading":"13.1.1 One table","text":"Example: Mean operator \nlm operator.","code":""},{"path":"common-patterns.html","id":"list-of-tables","chapter":"13 Common patterns","heading":"13.1.2 List of tables","text":"Example: PCA operator.","code":""},{"path":"common-patterns.html","id":"serialised-r-object","chapter":"13 Common patterns","heading":"13.1.3 Serialised R object","text":"Example: FlowSOM operator.","code":""},{"path":"common-patterns.html","id":"serialised-file","chapter":"13 Common patterns","heading":"13.1.4 Serialised file","text":"Example: Barplot operator.","code":""},{"path":"common-patterns.html","id":"output-relations","chapter":"13 Common patterns","heading":"13.2 Output relations","text":"","code":""},{"path":"common-patterns.html","id":"per-cell","chapter":"13 Common patterns","heading":"13.2.1 Per Cell","text":"Example: Mean operator, lm operator.","code":""},{"path":"common-patterns.html","id":"per-row-per-column","chapter":"13 Common patterns","heading":"13.2.2 Per Row / Per Column","text":"two typical cases creating relation per row per column :output computed per observation. case clustering\nalgorithms assign observation cluster ID.output computed per observation. case clustering\nalgorithms assign observation cluster ID.computed per variable. example, want scale values \nperform, operation per variable stratifying factor dataset.computed per variable. example, want scale values \nperform, operation per variable stratifying factor dataset.Example: PCA operator.","code":""},{"path":"common-patterns.html","id":"no-relation","chapter":"13 Common patterns","heading":"13.2.3 No relation","text":"useful relation needs made computed values existing\ndata. example, can consider two cases relevant:operator computes end result linked individual input\ndata pointsthe computation must available linked data point (example,\nwant generate constant can used together data)Example: Constant operator.","code":""},{"path":"advanced-patterns.html","id":"advanced-patterns","chapter":"14 Advanced patterns","heading":"14 Advanced patterns","text":"Coming soon.","code":""},{"path":"building-a-template.html","id":"building-a-template","chapter":"15 Building a template","heading":"15 Building a template","text":"","code":""},{"path":"building-a-template.html","id":"what-is-a-template","chapter":"15 Building a template","heading":"15.1 What is a template?","text":"template reusable Tercen workflow. typically developed want quickly reuse data analysis workflow new dataset.","code":""},{"path":"building-a-template.html","id":"general-development-workflow","chapter":"15 Building a template","heading":"15.2 General development workflow","text":"recommended test-driven development workflow follows:Initialise GitHub repository workflow based template provided TercenInitialise GitHub repository workflow based template provided TercenClone GitHub repository Tercen development instanceClone GitHub repository Tercen development instanceLoad minimal dataset serve purpose unit testing. mindful dataset everything computed workflow stored repository, hence remain small.Load minimal dataset serve purpose unit testing. mindful dataset everything computed workflow stored repository, hence remain small.Develop workflow example dataset.Develop workflow example dataset.Prepare workflow template.Prepare workflow template.Push changes deploy.Push changes deploy.","code":""},{"path":"building-a-template.html","id":"detailed-workflow","chapter":"15 Building a template","heading":"15.3 Detailed workflow","text":"1. Create Template RepoCreate new project based template repository.2. Import repository TercenCreate new project Github.3. Create Template WorkflowCreate standard Tercen workflow. Run steps needed.finalized workflow might look like one .4. Clone RenameClone workflow create golden standard. Rename unique **_gs** suffix (see naming convention).Naming ConventionsA Template workflow compared Golden Standard workflows based naming convention.Template workflow compared Golden Standard workflows based naming convention.workflow considered Golden Standard name ends **_gs**,  set letter numbers. example, Template_gs1, Template_gsA01 Template_gsAA valid Golden Standard names, whereas Template_gs_01 .workflow considered Golden Standard name ends **_gs**,  set letter numbers. example, Template_gs1, Template_gsA01 Template_gsAA valid Golden Standard names, whereas Template_gs_01 .Template Golden Standard considered match base name, , everything _gs suffix. example, Workflow, Workflow_gs01 Workflow_gs02 refer template (Workflow) two Golden Standards.Template Golden Standard considered match base name, , everything _gs suffix. example, Workflow, Workflow_gs01 Workflow_gs02 refer template (Workflow) two Golden Standards.cloned, Template Golden Standard folder. want move Golden Standard workflow folder named tests. , rename Golden Standard, adding tests/ name pressing Ok button.5. Reset Template WorkflowOpen Template Workflow (one without _gs** suffix), reset save .6. Commit Changes GithubFinally, select Git button., add desired commit message, personal Github token press Ok.","code":""},{"path":"building-a-template.html","id":"template-installation","chapter":"15 Building a template","heading":"15.4 Template installation","text":"template installed like Tercen module (operators, apps, templates).\nneed publish template JSON , one root.","code":""},{"path":"continuous-integration-workflow-1.html","id":"continuous-integration-workflow-1","chapter":"16 Continuous Integration Workflow","heading":"16 Continuous Integration Workflow","text":"link Workflow CI Action triggered push. GitHub Action continuous integration (CI) workflow automates process testing workflow template using tercen/workflow_runner_operator Docker container.’s breakdown part workflow :","code":""},{"path":"continuous-integration-workflow-1.html","id":"inputs","chapter":"16 Continuous Integration Workflow","heading":"16.0.1 Inputs","text":"workflow accepts several inputs, parameters CI process:git-repository (required): GitHub repository containing template tested.branch (optional, defaults main): branch GitHub repository.tag (optional): commit version tag GitHub repository.git-token (required): GitHub access token used authenticate access repository.service-uri (optional): URI service workflow connect.tercen-username (optional): Tercen service username.tercen-password (optional): Tercen service password.","code":""},{"path":"continuous-integration-workflow-1.html","id":"steps","chapter":"16 Continuous Integration Workflow","heading":"16.0.2 Steps","text":"1. Start Tercen ServicesAction: tercen/actions/start-tercen@main\nStarts necessary Tercen services facilitate test environment.2. Log Docker RegistryAction: docker/login-action@v3.3.0\nLogs GitHub Container Registry (ghcr.io) using GitHub actor’s credentials provided GitHub access token.3. Install Template RunnerRun: Pulls tercen/workflow_runner_operator:latest Docker image run workflow template tests.4. Test TemplateRun: Executes tercen/workflow_runner_operator Docker container.\nUses inputs GitHub repository, username/password Tercen, service URI, GitHub token execute test run.\n–report flag used generate test report.5. Copy Result FileRun: Copies test results (JSON file named test_results.json) inside Docker container (workflow_runner) local file system.6. Read Runner ResultsRun: Reads test_results.json file saves contents GitHub output variable named JSON, removing spaces easier processing.7. Check Runner ResultsCondition: Status field JSON output “Success,” workflow fail exit 1. ensures test results evaluated proceeding.8. Upload Runner ResultsAction: actions/upload-artifact@v3\ntest results (test_results.json) uploaded artifact retention 7 days, allowing results stored accessed later.","code":""},{"path":"continuous-integration-workflow-1.html","id":"summary","chapter":"16 Continuous Integration Workflow","heading":"16.0.3 Summary","text":"CI testing done pulling Docker container (tercen/workflow_runner_operator), running tests based specified GitHub repository, evaluating results. tests pass, results uploaded artifacts later inspection. tests fail, workflow exits error.","code":""},{"path":"tercen-library.html","id":"tercen-library","chapter":"17 Tercen Library","heading":"17 Tercen Library","text":"","code":""},{"path":"tercen-library.html","id":"description","chapter":"17 Tercen Library","heading":"Description","text":"Tercen Library collection operators, apps, templates datasets\nshared across team organisation.add dataset, step workflow, operator within step, Library window\nappears:can see modules can access Tercen public library organisational personal library.","code":""},{"path":"tercen-library.html","id":"library-management","chapter":"17 Tercen Library","heading":"Library management","text":"Coming soon.","code":""},{"path":"custom-library.html","id":"custom-library","chapter":"18 Custom library","heading":"18 Custom library","text":"","code":""},{"path":"custom-library.html","id":"creating-your-personal-library","chapter":"18 Custom library","heading":"Creating your personal library","text":"like create library:Create team give name (example “MyLibrary”)Go Settings > check “Library team” boxThis","code":""},{"path":"custom-library.html","id":"installing-a-module","chapter":"18 Custom library","heading":"Installing a module","text":"can add module dataset library. , can clone operator repository\nlibrary team:\n* Click “New project”\n* Navigate “git” tab\n* Fill name, url, tag auth token needed\n* Click “OK”module installed available next time open library component.","code":""},{"path":"naming.html","id":"naming","chapter":"19 Development guidelines","heading":"19 Development guidelines","text":"","code":""},{"path":"naming.html","id":"operator-naming-convention","chapter":"19 Development guidelines","heading":"Operator naming convention","text":"art naming fundamental programming guidelines help.examples operator names:median_operatorflowsom_operator , flowsom R package flowsomboxplot_shiny_operator, using R shinyThese examples follow naming guidelines, recommended structure operator name :FUNCTION_TYPE_operatorIt essentially list parts separated underscore.FUNCTION operator always indicated rest depends \noperator context.","code":""},{"path":"naming.html","id":"github-repository","chapter":"19 Development guidelines","heading":"GitHub repository","text":"Please make sure git repository description outlines brief functional\ndescription operator. e.g. calculates median.","code":""},{"path":"tim.html","id":"tim","chapter":"20 Using tim","heading":"20 Using tim","text":"tim R package includes utilities facilitate operator development Tercen Studio.","code":""},{"path":"tim.html","id":"development-workflow-utilities","chapter":"20 Using tim","heading":"20.1 Development workflow utilities","text":"","code":"tim::set_workflow_step_ids(data_step_url)\ntim::set_tercen_credentials()"},{"path":"tim.html","id":"test-utilities","chapter":"20 Using tim","heading":"20.2 Test utilities","text":"Populate test data:Check test data:","code":"tim::build_test_data(out_table = out_table, ctx = ctx, test_name = \"test1\")tim::check_test_local(out_table = out_table, test_name = \"test1\")"},{"path":"tim.html","id":"operator-folder-utilities","chapter":"20 Using tim","heading":"20.3 Operator folder utilities","text":"Populate GitHub workflow files:","code":"tim::populate_gh_workflow(type = \"R\")\ntim::populate_gh_workflow(type = \"docker\")"},{"path":"common-operator-issues.html","id":"common-operator-issues","chapter":"21 Common operator issues","heading":"21 Common operator issues","text":"","code":""},{"path":"common-operator-issues.html","id":"failed-to-decode","chapter":"21 Common operator issues","heading":"21.0.0.1 Failed to decode","text":"running TercenContext() function Python (tercenCtx() R), error happens possible retrieve data specified data step. Common underlying reasons include:\n* Data Step saved\n* Data Step already runIn order fix issue:\n* Reset data step,\n* Save - Refresh - Save data step,\n* Re-run TercenContext call.","code":"tercen.http.HttpClientService.TercenError: unknown : failed to decode"},{"path":"ci-and-github-actions.html","id":"ci-and-github-actions","chapter":"22 CI and Github Actions","heading":"22 CI and Github Actions","text":"","code":""},{"path":"ci-and-github-actions.html","id":"test-not-found","chapter":"22 CI and Github Actions","heading":"22.1 Test not found","text":"operator.run.test..foundThis error happens none test, tests workflow_tests found repository root.","code":""},{"path":"ci-and-github-actions.html","id":"wrong-relations","chapter":"22 CI and Github Actions","heading":"22.2 Wrong relations","text":"task.test.operator.bad.nRelationsThis error happens many tables (relations) computed expected outputs.","code":""},{"path":"ci-and-github-actions.html","id":"wrong-ncols-nrows","chapter":"22 CI and Github Actions","heading":"22.3 Wrong nCols / nRows","text":"task.test.operator.bad.nCols\ntask.test.operator.bad.nRowsThis error happens many columns rows computed expected output relations.","code":""},{"path":"ci-and-github-actions.html","id":"wrong-column-names","chapter":"22 CI and Github Actions","heading":"22.4 Wrong column names","text":"task.test.operator.bad.column.namesThis error happens computed expected output relations exact column names.Maybe ’ve added renamed column latest version operator? case, reference table updated accordingly.","code":""},{"path":"ci-and-github-actions.html","id":"wrong-column-type","chapter":"22 CI and Github Actions","heading":"22.5 Wrong column type","text":"task.test.operator.bad.column.typeCheck .ri .ci factors output integers operators.another factor (example, cluster ID), tercen test expect \ndouble. case, need provide schema file. use\ntim genenerate test, can use XXX argument build_test_data\nfunction.","code":""},{"path":"ci-and-github-actions.html","id":"wrong-values","chapter":"22 CI and Github Actions","heading":"22.5.1 Wrong values","text":"task.test.operator.bad.valueThis error occurs value different reference table \ncomputed table. gives row number values help\nfinding issue.","code":""},{"path":"ci-and-github-actions.html","id":"wrong-correlation","chapter":"22 CI and Github Actions","heading":"22.5.2 Wrong correlation","text":"task.test.operator.bad.correlationThis error occurs correlation reference table \ncomputed table values high enough.","code":""},{"path":"ci-and-github-actions.html","id":"untrusted-git","chapter":"22 CI and Github Actions","heading":"22.5.3 Untrusted git","text":"tercen.forbidden.untrusted.gitThis error occurs try install operator untrusted GitHub organisation. organisation develop operator\nadded Tercen instance configuration file.","code":""},{"path":"next-steps.html","id":"next-steps","chapter":"23 Next steps","heading":"23 Next steps","text":"ideas:Try code different operators using teRcen R package, Note \nusing R Studio auto-complete type methods Tercen\nclient tercen query object.Give feedback developer’s guide creating issueGive feedback Tercen sending email support@tercen.comContact us one-2-one session","code":""},{"path":"glossary.html","id":"glossary","chapter":"Glossary","heading":"Glossary","text":"App:\nsmall workflow composed steps, visuals operators. Typically \nachieves one task, e.g. PCA app. PCA app composed one result visual\none computation one data wrangling step.Cross-tab view:\nTercen interface window define projection view (.e. :\nrow, col, y-axis, x-axis, color, label).Library:\nrepository Tercen modules.Long format:\nformat every row measurement.Measurement: numerical variableModule:\nplug-Tercen. can operator, app, template.Observation: observation factor name given value (measurement),\nparticular moment time, particular variable.Operator:\noperator computes data supplied projection view defined using cross-tab window.Projection:\nprojection defined using cross-tab window.Step:\nsingle step allows visual projection optionally \ncomputation using operator.Template:\ntemplatised workflow.Variable: variable characteristic unit observed may\nassume one set values numerical measure \ncategory classification can assigned (e.g. income, age, weight, etc.,\n“occupation”, “industry”, “disease”, etc.Wide format:\nformat every column variable.Workflow:\nsequence steps apps achieve analysis pipeline.","code":""},{"path":"organisation-setup.html","id":"organisation-setup","chapter":"Organisation setup","heading":"Organisation setup","text":"wish develop Tercen modules, initial setup required","code":""},{"path":"organisation-setup.html","id":"create-a-docker-hub-organisation","chapter":"Organisation setup","heading":"1. Create a Docker Hub organisation","text":"Operators Docker images.images built pushed Docker Hub GitHub Action commit /tag.operator installed Tercen, image pulled Docker Hub.don’t already one, need set organisation account Docker Hub: https://hub.docker.com/","code":""},{"path":"organisation-setup.html","id":"choose-a-tercen-instance-to-run-unit-tests","chapter":"Organisation setup","heading":"2. Choose a Tercen instance to run unit tests","text":"Regression testing used development process Tercen modules.tests consist Tercen workflows can run Tercen instance. instance needs specified Tercen “test user” needs created. user used \nrun tests GitHub Action.Choose instance used run test. development instance example. need use service URI (e.g. https://tercen.com) next step.Create test user. need name password next step.","code":""},{"path":"organisation-setup.html","id":"set-up-your-github-organisation","chapter":"Organisation setup","heading":"3. Set up your GitHub organisation","text":"assume already GitHub organisation placeYou need add GH secrets\nDOCKERHUB_ORG, DOCKERHUB_USERNAME DOCKERHUB_PASSWORD\nTERCEN_TEST_USERNAME TERCEN_TEST_PASSWORD\nTERCEN_TEST_URI\nGITHUB_PAT\nDOCKERHUB_ORG, DOCKERHUB_USERNAME DOCKERHUB_PASSWORDTERCEN_TEST_USERNAME TERCEN_TEST_PASSWORDTERCEN_TEST_URIGITHUB_PATTemplate GH Actions\nCreate template GitHub repository organisation, based Tercen one\nEdit GitHub workflow files replace secrets organisation secrets just set \nCreate template GitHub repository organisation, based Tercen oneEdit GitHub workflow files replace secrets organisation secrets just set ","code":""},{"path":"organisation-setup.html","id":"tercen-instance-configuration","chapter":"Organisation setup","heading":"4. Tercen instance configuration","text":"using Tercen instance, need modify Tercen config file add GitHub organisation “trusted git” list.also need authorise Docker Hub organisation.","code":"tercen.allow.untrusted.git: 'false'\ntercen.allow.untrusted.docker: 'false'\ntercen.trusted.git:\n  - 'https://github.com/tercen/'\n  - 'https://github.com/YOUR_GITHUB_ORGANISATION/'# accept any image name starting by tercen or my-trusted-dockerhub-org, ex. my-trusted-dockerhub-org/my-docker-image\ntercen.trusted.docker:\n  - 'tercen'\n  - 'my-trusted-dockerhub-org'"},{"path":"tercen-studio.html","id":"tercen-studio","chapter":"Tercen Studio","heading":"Tercen Studio","text":"","code":""},{"path":"tercen-studio.html","id":"updating-tercen-studio","chapter":"Tercen Studio","heading":"Updating tercen-studio","text":"can update tercen-studio running:","code":"# stop tercen_studio\ndocker-compose down        \n# get tercen_studio latest version           \ngit pull\ndocker-compose pull\n# start tercen_studio\ndocker-compose up -d"},{"path":"tercen-studio.html","id":"uninstallation-of-tercen-studio","chapter":"Tercen Studio","heading":"Uninstallation of tercen-studio","text":"uninstall tercen-studio, need run:","code":"docker-compose down\n\n# check tercen docker volumes names\ndocker volume ls\n\n# delete tercen docker volumes\ndocker volume rm tercen_studio_couchdb-data\ndocker volume rm tercen_studio_tercen-data\ndocker volume rm tercen_studio_tercen-studio-data\ndocker volume rm tercen_studio_tercen-studio-renv"},{"path":"tercen-studio.html","id":"building-tercen-studio","chapter":"Tercen Studio","heading":"Building tercen-studio","text":"need build tercen-studio, run following code:","code":"cd docker\ndocker build -t tercen/tercen_studio:0.9.2.9 .\ndocker history --no-trunc tercen_studio:0.9.2.9\ndocker push tercen/tercen_studio:0.9.2.9"}]
